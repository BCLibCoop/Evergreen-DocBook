<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="upgradingevergreen-2.0">
	<info>
		<title>Upgrading Evergreen to 2.0</title>
		<abstract>
			<para>This Chapter will explain the step-by-step process of upgrading <application>Evergreen
			</application> to 2.0, including steps to upgrade <application>OpenSRF</application>. Before 
			upgrading, it is important to carefully plan an upgrade strategy to minimize system downtime and 
			service interruptions. All of the steps in this chapter are to be completed from the command line.</para>
			
        	</abstract>
	</info>    
		<para>Evergreen 2.0 has several software requirements:</para>
 		<itemizedlist>
			<listitem>PostgreSQL: Version 8.4 is the minimum supported version of PostgreSQL. </listitem>
			<listitem>Linux: Evergreen 2.0 has been tested on Debian Squeeze (6.0) and Ubuntu Lucid Lynx (10.04). If you are runnung an older version of these distributions, 
			you may want to upgrade befor installing Evergreen 2.0. For instructions on upgrading these distributions, visit the 
			<ulink url="http://www.debian.org/releases/squeeze/">Debian</ulink> or <ulink url="https://help.ubuntu.com/community/LucidUpgrades">Ubuntu</ulink> websites.</listitem>
		</itemizedlist>
		<para>In the following instructions, you are asked to perform certain steps as either the <systemitem class="username">root</systemitem>  or 
		<systemitem class="username">opensrf</systemitem> user.</para>
      		<itemizedlist>
			<listitem>Debian: To become the <systemitem class="username">root</systemitem> user, issue the <command>su</command> command and enter the password of the 
			<systemitem class="username">root</systemitem> user.</listitem>
      			<listitem>Ubuntu: To become the <systemitem class="username">root</systemitem> user, issue the <command>sudo su</command> command and enter the password of your current user.</listitem>
		</itemizedlist>
		<para>To switch from the <systemitem class="username">root</systemitem> user to a different user, issue the <command>su - [user]</command> command; for example, 
		<command>su - opensrf</command>. Once you have become a non-root user, to become the <systemitem class="username">root</systemitem> user again simply issue the exit command.</para> 
		<para>In the following instructions, <filename class='directory'>/path/to/OpenSRF/</filename> represents the path to the OpenSRF source directory.</para>
	<section xml:id="upgradingevergreen-stop_evergreen">
		<title>Backing Up Data</title>
		<procedure>
			<step>
				<para>As <systemitem class="username">root</systemitem>, stop the <application>Apache</application> 
				web server<indexterm><primary>web server</primary><secondary>Apache</secondary></indexterm>.</para>
			</step>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, stop all 
				<application>Evergreen</application>
				and <application>OpenSRF</application> services:</para>
				<screen><userinput>osrf_ctl.sh -l -a stop_all</userinput></screen>
			</step>
			<step>
				<para>Back up of the <filename class='directory'>/openils</filename> 
				directory.</para>
			</step>
			<step>
				<para><link linkend="backingup">Back up the <application>evergreen
				</application> database</link>.</para>
			</step>
		</procedure>
	</section>
	<section xml:id="upgradingevergreen-upgradingOpenSRF">
		<title>Upgrading OpenSRF to 1.6.3</title><indexterm><primary>OpenSRF</primary></indexterm>
		<procedure>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, download and extract the source files for <application>OpenSRF</application> 
				1.6.3:</para>
<screen><userinput>
wget http://open-ils.org/downloads/OpenSRF-1.6.3.tar.gz
tar xzf OpenSRF-1.6.3.tar.gz
</userinput></screen>
				<para>A new directory OpenSRF-1.6.3 is created.</para>
				<note><para>For the latest edition of OpenSRF, check the Evergreen download page at 
				<ulink url="http://www.open-ils.org/downloads.php" />.
				</para></note>
			</step>
			<step>	
				<para>As the <systemitem class="username">root</systemitem> user, install the software prerequisites using the automatic 
				prerequisite installer.</para> 
<screen><userinput>
aptitude install make
cd /home/opensrf/OpenSRF-1.6.3
</userinput></screen>		
				<para>Replace <option>[distribution]</option> below with the following value 
				for your distribution:</para>
				<itemizedlist>
					<listitem>
						<para><option>debian-squeeze</option> for <systemitem class="osname">Debian Squeeze (6.0)</systemitem>
						<indexterm><primary>Linux</primary><secondary>Debian</secondary></indexterm></para>
					</listitem>
					<listitem>
						<para><option>fedora13</option> for <systemitem class="osname">Fedora 13</systemitem>
						<indexterm><primary>Linux</primary><secondary>Fedora</secondary></indexterm></para>
					</listitem>			
					<listitem>
						<para><option>ubuntu-lucid</option> for <systemitem class="osname">Ubuntu Lucid Lynx
						(10.04)</systemitem><indexterm><primary>Linux</primary><secondary>Ubuntu</secondary></indexterm></para>
					</listitem>
					<listitem>
						<para><option>centos</option> for <systemitem class="osname">CentOS 5</systemitem>
						<indexterm><primary>Linux</primary><secondary>CentOS</secondary></indexterm></para>
					</listitem>
					<listitem>
						<para><option>rhel</option> for <systemitem class="osname">Red Hat Enterprise Linux 5</systemitem>
						<indexterm><primary>Linux</primary><secondary>Red Hat</secondary></indexterm></para>
					</listitem>
				</itemizedlist>
<screen><userinput>
cd /path/to/OpenSRF
make -f src/extras/Makefile.install [distribution]
</userinput></screen>
				<para>This will install a number of packages required by OpenSRF on your system, 
				including some Perl modules from <systemitem class="resource">CPAN</systemitem><indexterm><primary>Perl</primary><secondary>CPAN</secondary>
				</indexterm>. You can type <userinput>no</userinput> to the initial <systemitem class="resource">CPAN</systemitem> 
				configuration prompt to allow it to automatically configure itself to download 
				and install Perl modules from <systemitem class="resource">CPAN</systemitem>. The <systemitem class="resource">CPAN</systemitem> installer will ask you a number of 
				times whether it should install prerequisite modules - type <userinput>yes</userinput>.</para>
			</step>
			<step>	
				<para>As the <systemitem class="username">opensrf</systemitem> user, configure and compile OpenSRF:</para> 
				<note>You can include the <option>–enable-python</option> and <option>–enable-java</option> configure options if 
				you want to include support for Python<indexterm><primary>Python</primary></indexterm> and Java
				<indexterm><primary>Java</primary></indexterm>, respectively.</note>
<screen><userinput>
cd /home/opensrf/OpenSRF-1.6.3
./configure --prefix=/openils --sysconfdir=/openils/conf
make
</userinput></screen>		
			</step>
			<step>	
				<para>As the <systemitem class="username">root</systemitem> user, return to your OpenSRF build directory and install 
				OpenSRF:</para>
<screen><userinput>
cd /home/opensrf/OpenSRF-1.6.3
make install
</userinput></screen>
			</step>
			<step>
				<para>As the <systemitem class="username">root</systemitem> user, change the ownership of the installed files to the 
				<systemitem class="username">opensrf</systemitem> user:</para>
				<screen><userinput>chown -R opensrf:opensrf /openils</userinput></screen>
			</step>
			<step>
				<para>Restart and Test OpenSRF</para>
<screen><userinput>
osrf_ctl.sh -l -a start_all
/openils/bin/srfsh
srfsh#  request opensrf.math add 2 2
</userinput></screen>
	 			<para>You should see output such as:</para>
<screen>
Received Data: 4

------------------------------------
Request Completed Successfully
Request Time in seconds: 0.007519
------------------------------------

srfsh#
</screen>	
				<para>If test completed successfully move onto the next section. 
				Otherwise, refer to the <link linkend="troubleshooting">troubleshooting</link> chapter 
				of this documentation.</para> 
			</step>	
		</procedure>	
	</section>
	<section xml:id="upgradingevergreen-upgrading_from_1.6_to_2.0">
		<title>Upgrade <application>Evergreen</application> from 1.6.1 to 2.0</title>
		<note>
			<para>PostgreSQL 8.4 is the minimum supported version of PostgreSQL.</para> 
			<para>Evergreen 2.0 has been tested on Debian Squeeze (6.0) and Ubuntu Lucid (10.04). If you are runnung an older version of 
			these distributions, you may want to upgrade befor installing Evergreen 2.0. For instructions on upgrading these distribuitions, visit the 
			<ulink url="http://www.debian.org/releases/squeeze/">Debian</ulink> or <ulink url="https://help.ubuntu.com/community/LucidUpgrades">Ubuntu</ulink> websites.</para>
		</note>
		<procedure>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, download and extract <application>Evergreen 2.0</application>
				</para>
<screen><userinput>
wget http://www.open-ils.org/downloads/Evergreen-ILS-2.0.5.tar.gz
tar xzf Evergreen-ILS-2.0.5.tar.gz
</userinput></screen>
				<note><para>For the latest edition of Evergreen 2.0, check the Evergreen download page at
				<ulink url="http://www.open-ils.org/downloads.php" /> and adjust upgrading instructions accordingly.</para></note>
			</step>
			<step>
				<para>As the <systemitem class="username">root</systemitem> user, install the prerequisites:</para> 
				<screen><userinput>cd /home/opensrf/Evergreen-ILS-2.0.5</userinput></screen>	
				<para>On the next command, replace <option>[distribution]</option> with one of 
				these values for your distribution of Debian or Ubuntu:</para>
				<itemizedlist>
					
					<listitem>
						<para><option>debian-squeeze</option> for <systemitem class="osname">Debian Squeeze (6.0)</systemitem></para>
					</listitem>
					
					<listitem>
						<para><option>ubuntu-lucid</option> for  <systemitem class="osname">Ubuntu Lucid Lynx 
						(10.04)</systemitem></para>
					</listitem>
				</itemizedlist>
				<screen><userinput>make -f Open-ILS/src/extras/Makefile.install <option>[distribution]</option></userinput></screen>
			</step>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, configure and compile 
				<application>Evergreen</application>:</para>
				<screen><userinput>cd /home/opensrf/Evergreen-ILS-2.0.5</userinput></screen>
				<screen><userinput>./configure --prefix=/openils --sysconfdir=/openils/conf</userinput></screen>
				<screen><userinput>make</userinput></screen>
			</step>
			<step>
				<para>As the <systemitem class="username">root</systemitem> user, install 
				<application>Evergreen</application>:</para>
				<screen><userinput>make STAFF_CLIENT_BUILD_ID=rel_2_0_5 install</userinput></screen>
			</step>
			<step>
				<para>Change to the <application>Evergreen</application> installation 
				directory:</para>
				<screen><userinput>cd /home/opensrf/Evergreen-ILS-2.0.5</userinput></screen>
			</step>
			<step>
				<para>As the <emphasis>root</emphasis> user, change all files to be owned by the 
				<emphasis>opensrf</emphasis> user and group:</para>
				<screen><userinput>chown -R opensrf:opensrf /openils</userinput></screen>
			</step>			
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, update server symlink in <filename class="directory">/openils/var/web/xul/</filename>:</para>
<screen><userinput>
cd /openils/var/web/xul/
rm server
ln -s rel_2_0_5/server
</userinput></screen>
			</step>
			<step>
				<para>Update the <database>evergreen</database> database:</para>
				<note><para>It is recommended that you <link linkend="backingup">back up your Evergreen database</link> in order to restore your data if anything goes wrong.</para></note>
    				<note><para>The <filename>1.6.1-2.0-upgrade-db.sql</filename> upgrade script may take a long time (hours) to process 
                                 on larger systems.</para></note>
<screen>
<userinput>
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/1.6.1-2.0-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.0-2.0.1-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.1-2.0.2-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.1-2.0.2-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.2-2.0.3-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.3-2.0.4-upgrade-db.sql evergreen
psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/2.0.4-2.0.5-upgrade-db.sql evergreen
</userinput>
</screen> 	
                             
			</step>
<step>
				<para>Run the <filename>reingest-1.6-2.0.pl</filename> script to generate an sql script. Then use the sql file to reingest bib records into your 
				<database>evergreen</database> database. This is required to make the new facet sidebar in OPAC search results work and to upgrade the keyword indexes to use 
				the revised NACO normalization routine.</para>
				<note><para>If you are running a large Evergreen installation, it is recommend that you examine the script first. Reingesting a large number of bibliographic records 
				may take several hours.</para></note>
<screen><userinput>perl Open-ILS/src/sql/Pg/reingest-1.6-2.0.pl</userinput></screen>
<screen><userinput>psql -U evergreen -h localhost -f Open-ILS/src/sql/Pg/reingest-1.6-2.0.sql evergreen</userinput></screen>
			</step>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, 
				copy <filename>/openils/conf/oils_web.xml.example</filename> to <filename>/openils/conf/oils_web.xml</filename>
				. (If upgrading from 1.6.1.x, <filename>oils_web.xml</filename> should already exist.)</para>
				<indexterm><primary>configuration files</primary><secondary>oils_web.xml</secondary></indexterm>
				<screen><userinput>cp /openils/conf/oils_web.xml.example /openils/conf/oils_web.xml</userinput></screen>
			</step>
			<step>
				<para>Update <filename>opensrf_core.xml</filename> and <filename>opensrf.xml</filename> by copying the new example files 
				(<filename>/openils/conf/opensrf_core.xml.example</filename> and <filename>/openils/conf/opensrf.xml</filename>).</para>
				<indexterm><primary>configuration files</primary><secondary>opensrf.xml</secondary></indexterm>
				<screen><userinput>cp /openils/conf/opensrf_core.xml.example /openils/conf/opensrf_core.xml</userinput></screen>
				<indexterm><primary>configuration files</primary><secondary>opensrf_core.xml</secondary></indexterm>
				<screen><userinput>cp /openils/conf/opensrf.xml.example /openils/conf/opensrf.xml</userinput></screen>
				<caution><para>Copying these configuration files will remove any customizations you have made to them. Remember to redo your customizations after copying 
				them.</para></caution>
			</step>
			<step>
				<para>Update <filename>opensrf.xml</filename> with the database connection info:</para>
<screen><userinput>
perl Open-ILS/src/support-scripts/eg_db_config.pl --update-config \
--service all --create-offline --user evergreen --password evergreen \ 
--hostname localhost --port 5432 --database evergreen
</userinput></screen>
			</step>
			<step>
				<para>Update /etc/apache2/startup.pl by copying the example from 
				Open-ILS/examples/apache/startup.pl.</para><indexterm><primary>configuration files</primary><secondary>startup.pl</secondary></indexterm>
			</step>
			<step>
				<para>Update /etc/apache2/eg_vhost.conf by copying the example from 
				Open-ILS/examples/apache/eg_vhost.conf.</para><indexterm><primary>configuration files</primary><secondary>eg_vhost.conf</secondary></indexterm>
			</step>
			<step>
			<para>Update /etc/apache2/sites-available/eg.conf by copying the example from Open-ILS/
			examples/apache/eg.conf.</para><indexterm><primary>configuration files</primary><secondary>eg.conf</secondary></indexterm>
			</step>
			<caution>
				<para>Copying these Apache configuration files will remove any customizations you have made to them. Remember to redo your customizations after copying 
				them. For example, if you purchased an SSL certificate, you 
				will need to edit <filename>eg.conf</filename> to point to the appropriate SSL certificate files.</para>
				<indexterm><primary>SSL</primary><secondary>certificates</secondary></indexterm>
			</caution> 
		</procedure>	
	</section>
	<section xml:id="testing_after_upgrade">
		<title>Restart Evergreen and Test</title>
		<procedure>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, start all 
				<application>Evergreen</application> and <application>OpenSRF</application> 
				services:</para>
				<screen><userinput>osrf_ctl.sh -l -a start_all</userinput></screen>
			</step>
			<step>
				<para>As the <systemitem class="username">opensrf</systemitem> user, run <command>autogen</command> to refresh the static 
				organizational data files:</para><indexterm><primary>autogen</primary></indexterm>
<screen><userinput>
cd /openils/bin
./autogen.sh -c /openils/conf/opensrf_core.xml -u
</userinput></screen>
					
			</step>
			<step>
				<para>Start <command>srfsh</command> and try logging in  using your <application>Evergreen</application>
				username and password:</para>
<screen>
<userinput>/openils/bin/srfsh</userinput>
<prompt>srfsh%</prompt> <userinput>login <option>username</option> <option>password</option></userinput>
</screen> 
			</step>	
			<step>
				<para>Start the <application>Apache</application> web server.</para>
			</step>
		</procedure>
		<note>
			<para>If you encounter errors, refer to the <link linkend="troubleshooting">troubleshooting 
			section</link> of this documentation for tips 
			on finding solutions and seeking further assistance from the Evergreen community.</para>  
		</note>
	</section>
<section xml:id="upgrading_Postgresqlto9.0">
		<title>Upgrading PostgreSQL from 8.4 to 9.0</title>
		<simplesect>
			<title>Upgrading PostgreSQL on Debian Squeez</title>
		 	<procedure>
				<step>
					<para>Stop Evergreen and disconnect clients from database.</para>
				</step>			
				<step>
					<para>Add the following line to <filename>/etc/apt/sources.list</filename>:</para> 
<programlisting>
deb http://www.backports.org/debian squeeze-backports main contrib non-free
</programlisting>
				</step>
				<step>
					<para>Update the sources list on your server.</para>
<screen><userinput>				
apt-get update
</userinput></screen>
				</step>
				<step>
					<para>Backup your databases</para>
<screen><userinput>				
$ pg_dump [db connect args] [db name] > evergreen-backup.sql
</userinput></screen>
				</step>
				<step>
					<para>Install PostgreSQL 9.0 as well as the client, contrib and plperl support packages.</para>
<screen><userinput>				
apt-get -t squeeze-backports install postgresql-9.0 postgresql-client-9.0 postgresql-contrib-9.0 postgresql-plperl-9.0
</userinput></screen>
				</step>
				<step>
					<para>Drop the empty 9.0 cluster.</para>
<screen><userinput>				
pg_dropcluster --stop 9.0 main
</userinput></screen>
				</step>
				<step>
					<para>Update the 8.4 cluster (with evergreen database) to 9.0</para>
<screen><userinput>				
pg_upgradecluster 8.4 main
</userinput></screen>
				</step>
				<step>
					<para>Test by logging into psql, checking the postgrSQL version and running a simple SELECT query.</para>
<screen><userinput>	
psql -U evergreen			
evergreen=# select version();
evergreen=# select count(*) from biblio.record_entry;
</userinput></screen>
				</step>
				<step>
					<para>Restart Evergreen and Apache.</para>
				</step>
				<step>
					<para>Drop old 8.4 cluster (optional).</para>
<screen><userinput>	
pg_dropcluster 8.4 main
</userinput></screen>
				</step>
			</procedure>
		</simplesect>
			<simplesect>
			<title>Upgrading PostgreSQL on Ubuntu 10.04</title>
		 	<procedure>
				<step>
					<para>Stop Evergreen and disconnect clients from database.</para>
				</step>			
				<step>
					<para>Add the backport repository to your repository sources list:</para> 
<programlisting>
sudo add-apt-repository ppa:pitti/postgresql
</programlisting>
				</step>
				<step>
					<para>Update the sources list on your server.</para>
<screen><userinput>				
apt-get update
</userinput></screen>
				</step>
				<step>
					<para>As the <systemitem class="username">postgres</systemitem> user, backup your PostgreSQL databases.</para>
<screen><userinput><![CDATA[				
pg_dumpall > data
]]></userinput></screen>
				</step>
				<step>
					<para>As <systemitem class="username">root</systemitem>, remove PostgreSQL 8.4 and install 9.0.</para>
<screen><userinput>				
aptitude purge postgresql-8.4
aptitude install postgresql-9.0 postgresql-client-9.0 postgresql-contrib-9.0 postgresql-plperl-9.0
</userinput></screen>
				</step>
				<step>
					<para>as the <systemitem class="username">postgres</systemitem> user, recreate empty evergreen databases with required language supports.</para>
<screen><userinput>
dropdb evergreen
createdb -T template0 --lc-ctype=C --lc-collate=C -E UNICODE evergreen
createlang plperl   evergreen
createlang plperlu  evergreen
createlang plpgsql  evergreen
psql -f /usr/share/postgresql/9.0/contrib/tablefunc.sql evergreen
psql -f /usr/share/postgresql/9.0/contrib/tsearch2.sql  evergreen
psql -f /usr/share/postgresql/9.0/contrib/pgxml.sql     evergreen
</userinput></screen>
				</step>
				<step>
					<para>Update the 8.4 cluster (with evergreen database) to 9.0.</para>
<screen><userinput>				
pg_upgradecluster 8.4 main
</userinput></screen>
				</step>
				<step>
					<para>as the <systemitem class="username">postgres</systemitem> user, load data from backup into PostgreSQL 9.0.</para>
<screen><userinput><![CDATA[				
psql < data
]]></userinput></screen>
				</step>
				<step>
					<para>Restart Evergreen and Apache.</para>
				</step>
				<step>
					<para>Test by logging into psql, checking the postgrSQL version and running a simple SELECT query.</para>
<screen><userinput>	
psql -U evergreen			
evergreen=# select version();
evergreen=# select count(*) from biblio.record_entry;
</userinput></screen>
				</step>
			</procedure>
		</simplesect>
	</section>
</chapter>
