<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="server_install" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="EN"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">


<info>
    <title>Installing the Evergreen Server</title>
</info>
<simplesect id="_preamble_referenced_user_accounts">
<title>Preamble: referenced user accounts</title>
<simpara>In subsequent simplesects, we will refer to a number of different accounts, as
follows:</simpara>
<itemizedlist>
<listitem>
<simpara>
Linux user accounts:
</simpara>
<itemizedlist>
<listitem>
<simpara>
The <emphasis role="strong">user</emphasis> Linux account is the account that you use to log onto the
       Linux system as a regular user.
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">root</emphasis> Linux account is an account that has system administrator
       privileges. On Debian and Fedora you can switch to this account from
       your <emphasis role="strong">user</emphasis> account by issuing the <literal>su -</literal> command and entering the
       password for the <emphasis role="strong">root</emphasis> account when prompted. On Ubuntu you can switch
       to this account from your <emphasis role="strong">user</emphasis> account using the <literal>sudo su -</literal> command
       and entering the password for your <emphasis role="strong">user</emphasis> account when prompted.
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">opensrf</emphasis> Linux account is an account that you create when installing
       OpenSRF. You can switch to this account from the <emphasis role="strong">root</emphasis> account by
       issuing the <literal>su - opensrf</literal> command.
</simpara>
</listitem>
<listitem>
<simpara>
The <emphasis role="strong">postgres</emphasis> Linux account is created automatically when you install
       the PostgreSQL database server. You can switch to this account from the
       <emphasis role="strong">root</emphasis> account by issuing the <literal>su - postgres</literal> command.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
PostgreSQL user accounts:
</simpara>
<itemizedlist>
<listitem>
<simpara>
The <emphasis role="strong">evergreen</emphasis> PostgreSQL account is a superuser account that you will
       create to connect to the PostgreSQL database server.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Evergreen administrator account:
</simpara>
<itemizedlist>
<listitem>
<simpara>
The <emphasis role="strong">egadmin</emphasis> Evergreen account is an administrator account for
       Evergreen that you will use to test connectivity and configure your
       Evergreen instance.
</simpara>
</listitem>
</itemizedlist>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="_preamble_getting_an_evergreen_official_release_tarball">
<title>Preamble: Getting an Evergreen official release tarball</title>
<simpara>To download and extract the source for the current release of Evergreen, issue
the following commands as the <emphasis role="strong">user</emphasis> Linux account:</simpara>
<programlisting language="bash" linenumbering="unnumbered">wget -c http://evergreen-ils.org/downloads/Evergreen-ILS-2.1.1.tar.gz
tar xzf Evergreen-ILS-2.1.1.tar.gz</programlisting>
</simplesect>
<simplesect id="_preamble_developer_instructions">
<title>Preamble: Developer instructions</title>
<note><simpara>Skip this section if you are using an official release tarball downloaded
from <ulink url="http://evergreen-ils.org/downloads">http://evergreen-ils.org/downloads</ulink></simpara></note>
<simpara>Developers working directly with the source code from the Git repository,
rather than an official release tarball, must install some extra packages
and perform one step before they can proceed with the <literal>./configure</literal> step.</simpara>
<simpara>As the <emphasis role="strong">root</emphasis> Linux account, install the following packages:</simpara>
<itemizedlist>
<listitem>
<simpara>
autoconf
</simpara>
</listitem>
<listitem>
<simpara>
automake
</simpara>
</listitem>
<listitem>
<simpara>
libtool
</simpara>
</listitem>
</itemizedlist>
<simpara>As the <emphasis role="strong">user</emphasis> Linux account, issue the following command in the Evergreen
source directory to generate the configure script and Makefiles:</simpara>
<programlisting language="bash" linenumbering="unnumbered">./autogen.sh</programlisting>
<simpara>After running <literal>make install</literal>, developers also need to install the Dojo Toolkit
set of JavaScript libraries. The appropriate version of Dojo is included
in Evergreen release tarballs. Developers should install the Dojo 1.3.3
version of Dojo by issuing the following commands as the <emphasis role="strong">opensrf</emphasis> Linux
account:</simpara>
<programlisting language="bash" linenumbering="unnumbered">wget http://download.dojotoolkit.org/release-1.3.3/dojo-release-1.3.3.tar.gz
tar -C /openils/var/web/js -xzf dojo-release-1.3.3.tar.gz
cp -r /openils/var/web/js/dojo-release-1.3.3/* /openils/var/web/js/dojo/.</programlisting>
</simplesect>
<simplesect id="_installing_prerequisites">
<title>Installing prerequisites</title>
<simpara>Evergreen has a number of prerequisite packages that must be installed
before you can successfully configure, compile, and install Evergreen.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Begin by installing the most recent version of OpenSRF (2.0 or later).
   You can download OpenSRF releases from <ulink url="http://evergreen-ils.org/opensrf.php">http://evergreen-ils.org/opensrf.php</ulink>
</simpara>
</listitem>
<listitem>
<simpara>
On many distributions, it is necessary to install PostgreSQL 9 from external
   repositories.
</simpara>
<itemizedlist>
<listitem>
<simpara>
On Debian Squeeze, open <literal>/etc/apt/sources.list</literal> in a text editor as the
    <emphasis role="strong">root</emphasis> Linux account and add the following line:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">deb http://backports.debian.org/debian-backports squeeze-backports main contrib</programlisting>
</listitem>
<listitem>
<simpara>
On Ubuntu Lucid, you can use a PPA (personal package archive), which are
    package sources hosted on Launchpad. The one most commonly used by Evergreen
    Community members is maintained by Martin Pitt, who also maintains the
    official PostgreSQL packages for Ubuntu. As the <emphasis role="strong">root</emphasis> Linux account, issue
    the following commands to add the PPA source:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">apt-get install python-software-properties
add-apt-repository ppa:pitti/postgresql</programlisting>
</listitem>
<listitem>
<simpara>
Fedora 15 comes with PostgreSQL 9, so no additional steps are required.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
On Debian and Ubuntu, run <literal>aptitude update</literal> as the <emphasis role="strong">root</emphasis> Linux account to
   retrieve the new packages from the backports repository.
</simpara>
</listitem>
<listitem>
<simpara>
Issue the following commands as the <emphasis role="strong">root</emphasis> Linux account to install
   prerequisites using the <literal>Makefile.install</literal> prerequisite installer,
   substituting <literal>debian-squeeze</literal>, <literal>fedora15</literal>, <literal>ubuntu-lucid</literal>, <literal>centos</literal>, or
   <literal>rhel</literal> for &lt;osname&gt; below:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">make -f Open-ILS/src/extras/Makefile.install &lt;osname&gt;</programlisting>
<note><simpara><literal>centos</literal> and <literal>rhel</literal> are less tested than the <literal>debian</literal>, <literal>fedora</literal>,
and <literal>ubuntu</literal> options.  Your patches and suggestions for improvement are
welcome!</simpara></note>
</listitem>
<listitem>
<simpara>
Add the libdbi-libdbd libraries to the system dynamic library path by
   issuing the following commands as the <emphasis role="strong">root</emphasis> Linux account:
</simpara>
<formalpara><title>Debian / Ubuntu</title><para>
<programlisting language="bash" linenumbering="unnumbered">echo "/usr/local/lib/dbd" &gt; /etc/ld.so.conf.d/eg.conf
ldconfig</programlisting>
</para></formalpara>
<formalpara><title>Fedora</title><para>
<programlisting language="bash" linenumbering="unnumbered">echo "/usr/lib64/dbd" &gt; /etc/ld.so.conf.d/eg.conf
ldconfig</programlisting>
</para></formalpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_configuration_and_compilation_instructions">
<title>Configuration and compilation instructions</title>
<simpara>For the time being, we are still installing everything in the <literal>/openils/</literal>
directory. From the Evergreen source directory, issue the following commands as
the <emphasis role="strong">user</emphasis> Linux account to configure and build Evergreen:</simpara>
<programlisting language="bash" linenumbering="unnumbered">./configure --prefix=/openils --sysconfdir=/openils/conf
make</programlisting>
</simplesect>
<simplesect id="_installation_instructions">
<title>Installation instructions</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Once you have configured and compiled Evergreen, issue the following
   command as the <emphasis role="strong">root</emphasis> Linux account to install Evergreen, build the server
   portion of the staff client, and copy example configuration files to
   <literal>/openils/conf</literal>.
   Change the value of the <literal>STAFF_CLIENT_STAMP_ID</literal> variable to match the version
   of the staff client that you will use to connect to the Evergreen server.
</simpara>
<programlisting language="bash" linenumbering="unnumbered">make STAFF_CLIENT_STAMP_ID=rel_2_1_1 install</programlisting>
</listitem>
<listitem>
<simpara>
The server portion of the staff client expects <literal>http://hostname/xul/server</literal>
   to resolve. Issue the following commands as the <emphasis role="strong">root</emphasis> Linux account to
   create a symbolic link pointing to the <literal>server</literal> subdirectory of the server
   portion of the staff client that we just built using the staff client ID
   <emphasis>rel_name</emphasis>:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">cd /openils/var/web/xul
ln -sf rel_name/server server</programlisting>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_change_ownership_of_the_evergreen_files">
<title>Change ownership of the Evergreen files</title>
<simpara>All files in the <literal>/openils/</literal> directory and subdirectories must be owned by the
<literal>opensrf</literal> user. Issue the following command as the <emphasis role="strong">root</emphasis> Linux account to
change the ownership on the files:</simpara>
<programlisting language="bash" linenumbering="unnumbered">chown -R opensrf:opensrf /openils</programlisting>
</simplesect>
<simplesect id="_create_the_oils_web_xml_configuration_file">
<title>Create the oils_web.xml configuration file</title>
<simpara>Many administration interfaces, such as acquisitions, bookings, and various
configuration screens, depend on the correct configuration of HTML templates.
Copying the sample configuration file into place should work in most cases:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cp /openils/conf/oils_web.xml.example /openils/conf/oils_web.xml</programlisting>
</simplesect>
<simplesect id="_configure_the_apache_web_server">
<title>Configure the Apache Web server</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
Use the example configuration files in <literal>Open-ILS/examples/apache/</literal> to
configure your Web server for the Evergreen catalog, staff client, Web
services, and administration interfaces. Issue the following commands as the
<emphasis role="strong">root</emphasis> Linux account:
</simpara>
<formalpara><title>Debian and Ubuntu</title><para>
<programlisting language="bash" linenumbering="unnumbered">cp Open-ILS/examples/apache/eg.conf       /etc/apache2/sites-available/
cp Open-ILS/examples/apache/eg_vhost.conf /etc/apache2/
cp Open-ILS/examples/apache/startup.pl    /etc/apache2/
# Now set up SSL
mkdir /etc/apache2/ssl
cd /etc/apache2/ssl</programlisting>
</para></formalpara>
<formalpara><title>Fedora</title><para>
<programlisting language="bash" linenumbering="unnumbered">cp Open-ILS/examples/apache/eg.conf       /etc/httpd/sites-available/
cp Open-ILS/examples/apache/eg_vhost.conf /etc/httpd/
cp Open-ILS/examples/apache/startup.pl    /etc/httpd/
# Now set up SSL
mkdir /etc/httpd/ssl
cd /etc/httpd/ssl</programlisting>
</para></formalpara>
</listitem>
<listitem>
<simpara>
The <literal>openssl</literal> command cuts a new SSL key for your Apache server. For a
production server, you should purchase a signed SSL certificate, but you can
just use a self-signed certificate and accept the warnings in the staff client
and browser during testing and development. Create an SSL key for the Apache
server by issuing the following command as the <emphasis role="strong">root</emphasis> Linux account:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">openssl req -new -x509 -days 365 -nodes -out server.crt -keyout server.key</programlisting>
</listitem>
<listitem>
<simpara>
As the <emphasis role="strong">root</emphasis> Linux account, edit the <literal>eg.conf</literal> file that you copied into
place.
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Replace <literal>Allow from 10.0.0.0/8</literal> with <literal>Allow from all</literal> (to enable
     access to the offline upload / execute interface from any workstation on
     any network - note that you must secure this for a production instance)
</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>
Change the user for the Apache server.
</simpara>
<itemizedlist>
<listitem>
<simpara>
(Debian and Ubuntu): As the <emphasis role="strong">root</emphasis> Linux account, edit
    <literal>/etc/apache2/envvars</literal>.  Change <literal>export APACHE_RUN_USER=www-data</literal> to
    <literal>export APACHE_RUN_USER=opensrf</literal>.
</simpara>
</listitem>
<listitem>
<simpara>
(Fedora): As the <emphasis role="strong">root</emphasis> Linux account , edit <literal>/etc/httpd/conf/httpd.conf</literal>.
    Change <literal>User apache</literal> to <literal>User opensrf</literal>.
</simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
Configure Apache with performance settings appropriate for Evergreen:
</simpara>
<itemizedlist>
<listitem>
<simpara>
(Debian and Ubuntu): As the <emphasis role="strong">root</emphasis> Linux account, edit
    <literal>/etc/apache2/apache2.conf</literal>:
</simpara>
</listitem>
<listitem>
<simpara>
(Fedora): As the <emphasis role="strong">root</emphasis> Linux account, edit <literal>/etc/httpd/conf/httpd.conf</literal>:
</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>
Change <literal>KeepAliveTimeout</literal> to <literal>1</literal>. Higher values reduce the chance of
       a request timing out unexpectedly, but increase the risk of using up
       all available Apache child processes.
</simpara>
</listitem>
<listitem>
<simpara>
<emphasis>Optional</emphasis>: Change <literal>MaxKeepAliveRequests</literal> to <literal>100</literal>
</simpara>
</listitem>
<listitem>
<simpara>
Update the prefork configuration simplesect to suit your environment. The
       following settings apply to a busy system:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">&lt;IfModule mpm_prefork_module&gt;
   StartServers           20
   MinSpareServers         5
   MaxSpareServers        15
   MaxClients            150
   MaxRequestsPerChild 10000
&lt;/IfModule&gt;</programlisting>
</listitem>
</orderedlist>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
(Debian and Ubuntu): As the <emphasis role="strong">root</emphasis> Linux account, enable the Evergreen site:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">a2dissite default  # OPTIONAL: disable the default site (the "It Works" page)
a2ensite eg.conf</programlisting>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_configure_opensrf_for_the_evergreen_application">
<title>Configure OpenSRF for the Evergreen application</title>
<simpara>There are a number of example OpenSRF configuration files in <literal>/openils/conf/</literal>
that you can use as a template for your Evergreen installation. Issue the
following commands as the <emphasis role="strong">opensrf</emphasis> Linux account:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cp -b /openils/conf/opensrf_core.xml.example /openils/conf/opensrf_core.xml
cp -b /openils/conf/opensrf.xml.example /openils/conf/opensrf.xml</programlisting>
<simpara>When you installed OpenSRF, you created four Jabber users on two
separate domains and edited the <literal>opensrf_core.xml</literal> file accordingly. Please
refer back to the OpenSRF README and, as the <emphasis role="strong">opensrf</emphasis> Linux account, edit the
Evergreen version of the <literal>opensrf_core.xml</literal> file using the same Jabber users
and domains as you used while installing and testing OpenSRF.</simpara>
<note><simpara>The <literal>-b</literal> flag tells the <literal>cp</literal> command to create a backup version of the
destination file. The backup version of the destination file has a tilde (<literal>~</literal>)
appended to the file name, so if you have forgotten the Jabber users and
domains, you can retrieve the settings from the backup version of the files.</simpara></note>
<simpara><literal>eg_db_config.pl</literal>, described in the following simplesect, sets the database
connection information in <literal>opensrf.xml</literal> for you.</simpara>
</simplesect>
<simplesect id="_creating_the_evergreen_database">
<title>Creating the Evergreen database</title>
<simpara>By default, the <literal>Makefile.install</literal> prerequisite installer does not install
the PostgreSQL 9.0 database server required by every Evergreen system;
for production use, most libraries install the PostgreSQL database server on a
dedicated machine. You can install the packages required by Debian, Ubuntu, or
Fedora on the machine of your choice using the following commands as the <emphasis role="strong">root</emphasis>
Linux account:</simpara>
<formalpara><title>(Debian / Ubuntu) Installing PostgreSQL 9.0 server packages</title><para>
<programlisting language="bash" linenumbering="unnumbered">make -f Open-ILS/src/extras/Makefile.install install_pgsql_server_debs_90</programlisting>
</para></formalpara>
<formalpara><title>(Fedora 15) Installing PostgreSQL 9.0 server packages</title><para>
<programlisting language="bash" linenumbering="unnumbered">make -f Open-ILS/src/extras/Makefile.install install_fedora_pgsql_server</programlisting>
</para></formalpara>
<simpara>For a standalone PostgreSQL server, install the following Perl modules as the
<emphasis role="strong">root</emphasis> Linux account:</simpara>
<formalpara><title>(Debian / Ubuntu) Installing additional Perl modules on a standalone PostgreSQL 9.0 server</title><para>
<programlisting language="bash" linenumbering="unnumbered">aptitude install gcc libxml-libxml-perl libxml-libxslt-perl
cpan Business::ISBN
cpan JSON::XS
cpan Library::CallNumber::LC
cpan MARC::Record
cpan MARC::File::XML
cpan UUID::Tiny</programlisting>
</para></formalpara>
<formalpara><title>(Fedora 15) Installing additional Perl modules on a standalone PostgreSQL 9.0 server</title><para>
<programlisting language="bash" linenumbering="unnumbered">yum install gcc perl-XML-LibXML perl-XML-LibXSLT perl-Business-ISBN
cpan JSON::XS
cpan Library::CallNumber::LC
cpan MARC::Record
cpan MARC::File::XML
cpan UUID::Tiny</programlisting>
</para></formalpara>
<simpara>You need to create a PostgreSQL superuser to create and access the database.
Issue the following command as the <emphasis role="strong">postgres</emphasis> Linux account to create a new
PostgreSQL superuser named <literal>evergreen</literal>. When prompted, enter the new user&#8217;s
password:</simpara>
<programlisting language="bash" linenumbering="unnumbered">createuser -s -P evergreen</programlisting>
<simpara>Once you have created the <emphasis role="strong">evergreen</emphasis> PostgreSQL account, you also need to
create the database and schema, and configure your configuration files to point
at the database server. Issue the following command as the <emphasis role="strong">root</emphasis> Linux account
from inside the Evergreen source directory, replacing &lt;user&gt;, &lt;password&gt;,
&lt;hostname&gt;, &lt;port&gt;, and &lt;dbname&gt; with the appropriate values for your
PostgreSQL database (where &lt;user&gt; and &lt;password&gt; are for the <emphasis role="strong">evergreen</emphasis>
PostgreSQL account you just created), and replace &lt;admin-user&gt; and &lt;admin-pass&gt;
with the values you want for the <emphasis role="strong">egadmin</emphasis> Evergreen administrator account:</simpara>
<programlisting language="bash" linenumbering="unnumbered">perl Open-ILS/src/support-scripts/eg_db_config.pl --update-config \
       --service all --create-database --create-schema --create-offline \
       --user &lt;user&gt; --password &lt;password&gt; --hostname &lt;hostname&gt; --port &lt;port&gt; \
       --database &lt;dbname&gt; --admin-user &lt;admin-user&gt; --admin-pass &lt;admin-pass&gt;</programlisting>
<simpara>This creates the database and schema and configures all of the services in
your <literal>/openils/conf/opensrf.xml</literal> configuration file to point to that database.
It also creates the configuration files required by the Evergreen <literal>cgi-bin</literal>
administration scripts, and sets the user name and password for the <emphasis role="strong">egadmin</emphasis>
Evergreen administrator account to your requested values.</simpara>
<simplesect id="_creating_the_database_on_a_remote_server">
<title>Creating the database on a remote server</title>
<simpara>In a production instance of Evergreen, your PostgreSQL server should be
installed on a dedicated server. To create the database in that case, you
can either:</simpara>
<itemizedlist>
<listitem>
<simpara>
Install the PostgreSQL contrib modules on the machine on which you
     are installing the Evergreen code, and use the --create-database
     option from that machine, or
</simpara>
</listitem>
<listitem>
<simpara>
Copy the <literal>Open-ILS/src/sql/Pg/create_database.sql</literal> script to your
     PostgreSQL server and invoke it as the <emphasis role="strong">postgres</emphasis> Linux account:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">psql -vdb_name=&lt;dbname&gt; -vcontrib_dir=`pg_config --sharedir`/contrib -f create_database.sql</programlisting>
</listitem>
</itemizedlist>
<simpara>Then you can issue the <literal>eg_db_config.pl</literal> command as above <emphasis>without</emphasis> the
<literal>--create-database</literal> argument to create your schema and configure your
configuration files.</simpara>
</simplesect>
</simplesect>
<simplesect id="_starting_evergreen">
<title>Starting Evergreen</title>
<orderedlist numeration="arabic">
<listitem>
<simpara>
As the <emphasis role="strong">root</emphasis> Linux account, start the <literal>memcached</literal> and <literal>ejabberd</literal> services
(if they aren&#8217;t already running):
</simpara>
<programlisting language="bash" linenumbering="unnumbered">/etc/init.d/ejabberd start
/etc/init.d/memcached start</programlisting>
</listitem>
<listitem>
<simpara>
As the <emphasis role="strong">opensrf</emphasis> Linux account, start Evergreen. The <literal>-l</literal> flag in the
following command is only necessary if you want to force Evergreen to treat the
hostname as <literal>localhost</literal>; if you configured <literal>opensrf.xml</literal> using the real
hostname of your machine as returned by <literal>perl -ENet::Domain 'print
Net::Domain::hostfqdn() . "\n";'</literal>, you should not use the <literal>-l</literal> flag.
</simpara>
<programlisting language="bash" linenumbering="unnumbered">osrf_ctl.sh -l -a start_all</programlisting>
<itemizedlist>
<listitem>
<simpara>
If you receive the error message <literal>bash: osrf_ctl.sh: command not found</literal>,
     then your environment variable <literal>PATH</literal> does not include the <literal>/openils/bin</literal>
     directory; this should have been set in the <emphasis role="strong">opensrf</emphasis> Linux account&#8217;s
     <literal>.bashrc</literal> configuration file. To manually set the <literal>PATH</literal> variable, edit the
     configuration file <literal>~/.bashrc</literal> as the <emphasis role="strong">opensrf</emphasis> Linux account and add the
     following line:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">export PATH=$PATH:/openils/bin</programlisting>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara>
As the <emphasis role="strong">opensrf</emphasis> Linux account, generate the Web files needed by the staff
   client and catalogue and update the organization unit proximity (you need to do
   this the first time you start Evergreen, and after that each time you change
   the library hierarchy in <literal>config.cgi</literal>):
</simpara>
<programlisting language="bash" linenumbering="unnumbered">autogen.sh -u</programlisting>
</listitem>
<listitem>
<simpara>
As the <emphasis role="strong">root</emphasis> Linux account, restart the Apache Web server:
</simpara>
<programlisting language="bash" linenumbering="unnumbered">/etc/init.d/apache2 restart</programlisting>
<simpara>If the Apache Web server was running when you started the OpenSRF services, you
might not be able to successfully log in to the OPAC or staff client until the
Apache Web server is restarted.</simpara>
</listitem>
</orderedlist>
</simplesect>
<simplesect id="_testing_connections_to_evergreen">
<title>Testing connections to Evergreen</title>
<simpara>Once you have installed and started Evergreen, test your connection to
Evergreen via <literal>srfsh</literal>. As the <emphasis role="strong">opensrf</emphasis> Linux account, issue the following
commands to start <literal>srfsh</literal> and try to log onto the Evergreen server using the
<emphasis role="strong">egadmin</emphasis> Evergreen administrator user name and password that you set using the
<literal>eg_db_config.pl</literal> command:</simpara>
<programlisting language="bash" linenumbering="unnumbered">/openils/bin/srfsh
srfsh% login &lt;admin-user&gt; &lt;admin-pass&gt;</programlisting>
<simpara>You should see a result like:</simpara>
<literallayout class="monospaced">Received Data: "250bf1518c7527a03249858687714376"
------------------------------------
Request Completed Successfully
Request Time in seconds: 0.045286
------------------------------------</literallayout>
<literallayout class="monospaced">Received Data: {
   "ilsevent":0,
   "textcode":"SUCCESS",
   "desc":" ",
   "pid":21616,
   "stacktrace":"oils_auth.c:304",
   "payload":{
      "authtoken":"e5f9827cc0f93b503a1cc66bee6bdd1a",
      "authtime":420
   }</literallayout>
<literallayout class="monospaced">}</literallayout>
<literallayout class="monospaced">------------------------------------
Request Completed Successfully
Request Time in seconds: 1.336568
------------------------------------</literallayout>
<simpara>If this does not work, it&#8217;s time to do some troubleshooting.</simpara>
<itemizedlist>
<listitem>
<simpara>
As the <emphasis role="strong">opensrf</emphasis> Linux acccount, run the <literal>settings-tester.pl</literal> script to see
    if it finds any system configuration problems. The script is found at
    <literal>Open-ILS/src/support-scripts/settings-tester.pl</literal> in the Evergreen source
    tree.
</simpara>
</listitem>
<listitem>
<simpara>
Follow the steps in the <ulink url="http://evergreen-ils.org/dokuwiki/doku.php?id=troubleshooting:checking_for_errors">troubleshooting guide</ulink>.
</simpara>
</listitem>
<listitem>
<simpara>
If you have faithfully followed the entire set of installation steps
    listed here, you are probably extremely close to a working system.
    Gather your configuration files and log files and contact the
    <ulink url="http://open-ils.org/listserv.php">Evergreen development mailing list</ulink>
    for assistance before making any drastic changes to your system
    configuration.
</simpara>
</listitem>
</itemizedlist>
</simplesect>
<simplesect id="_getting_help">
<title>Getting help</title>
<simpara>Need help installing or using Evergreen? Join the mailing lists at
<ulink url="http://evergreen-ils.org/listserv.php">http://evergreen-ils.org/listserv.php</ulink> or contact us on the Freenode
IRC network on the #evergreen channel.</simpara>
</simplesect>
</chapter>
