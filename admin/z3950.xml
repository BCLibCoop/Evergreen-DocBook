<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="z3950" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="EN"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title><systemitem class="protocol">SRU</systemitem> and <systemitem class="protocol">Z39.50</systemitem> Server</title>
    </info>
    <para>Evergreen is extremely scalable and can serve the need of a large range of libraries. The specific requirements and configuration of your system should be determined based on your 
	specific needs of your organization or consortium.</para>
	<section xml:id="Testing_SRU_yaz-client">
	        <info>
	            <title>Testing SRU with yaz-client</title><indexterm><primary>yaz</primary></indexterm>
	        </info>	
			 <para>yaz-client is installed as a part of Index Data's YAZ software. Recent versions include support for querying <systemitem class="protocol">SRU</systemitem> servers. 
			Evergreen ships an <systemitem class="protocol">SRU</systemitem> configuration <indexterm><primary>SRU</primary></indexterm>
			that works out of the box. To search Evergreen with yaz-client, choose the <emphasis>GET</emphasis> query method and issue the <command>find</command> command. 
			In the following example, we connect to the Evergreen test server <systemitem class="domainname">dev.gapines.org</systemitem> - substitute this hostname with your own 
			Evergreen server hostname:</para>
			<note><para>Some older versions of yaz-client have known issues with <systemitem class="protocol">SRU</systemitem>. Ensure that you are using the latest edition of yaz from 
			<link xlink:href="http://www.indexdata.com/yaz">http://www.indexdata.com/yaz</link>.</para></note>
			<screen><userinput>$ yaz-client http://dev.gapines.org/opac/extras/sru</userinput></screen>
			<screen><prompt>Z></prompt> <userinput>sru GET 1.1</userinput></screen>
			<screen><prompt>Z></prompt> <userinput>find hemingway</userinput></screen>
			
			 <para>If your database has records that match that term, you will get the corresponding <systemitem>MARCXML</systemitem> records 
			in your response from yaz-client.</para><indexterm><primary>MARCXML</primary></indexterm>
			 <para>Here's what the SRU request looks like as sent to the Evergreen web server:</para>
			 <screen><userinput>GET /opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0</userinput></screen>
			<para>You can see what the response looks like by hitting the same URL in your Web browser: 
			<ulink url="http://dev.gapines.org/opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0">
			http://dev.gapines.org/opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0</ulink>
			<systemitem>CQL</systemitem> queries</para>
			 <para>Evergreen supports some <systemitem>CQL</systemitem> <indexterm><primary>CQL</primary></indexterm> index-sets for advanced queries such as a subset of 
			<systemitem>Dublin Core</systemitem> (DC) elements. Those DC elements that are 
			supported map to Evergreen default indexes as follows:</para><indexterm><primary>Dublin Core</primary></indexterm>
			<informaltable xml:id="dc_elements">	
			<tgroup cols="2">
				<colspec colnum="1" colname="element" colwidth="1.0*"/>
				<colspec colnum="2" colname="EGindex" colwidth="1.0*"/>
				<thead>
					<row>
						<entry>DC element </entry>
						<entry>Evergreen index</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>title</entry>
						<entry>title</entry>				
					</row>
					<row>
						<entry>creator </entry>
						<entry>author</entry>				
					</row>
					<row>
						<entry>contributor</entry>
						<entry>author</entry>				
					</row>
					<row>
						<entry>publisher</entry>
						<entry>keyword</entry>				
					</row>
					<row>
						<entry>subject</entry>
						<entry>subject</entry>				
					</row>
					<row>
						<entry>identifier</entry>
						<entry>keyword</entry>				
					</row>
					<row>
						<entry>type</entry>
						<entry>none</entry>				
					</row>
					<row>
						<entry>format</entry>
						<entry>none</entry>				
					</row>
					<row>
						<entry>language</entry>
						<entry>lang</entry>				
					</row>
				</tbody>
			</tgroup>
			</informaltable>
			<para>Here are a few examples of <systemitem class="protocol">SRU</systemitem> searches against some of these indexes:</para>
			<itemizedlist>
				<listitem>dc.title all <quote>complete dinosaur</quote></listitem>
				<listitem>dc.subject all <quote>britain france</quote></listitem>
				<listitem>dc.title exact <quote>The Empire Strikes Back</quote></listitem>
				<listitem>dc.author=king and dc.title=zone</listitem>
			</itemizedlist>
	</section>
	<section xml:id="Z3950serversupport">
	        <info>
	            <title>Setting up <systemitem class="protocol">Z39.50</systemitem> server support</title><indexterm><primary>Z39.50</primary></indexterm>
	        </info>	

			<note><para>You must have Evergreen's <systemitem class="protocol">SRU</systemitem> server running before you can enable <systemitem>Z39.50</systemitem> server support.</para>
			</note>			 
			<para>This support uses an <systemitem class="protocol">Z39.50</systemitem>-to-<systemitem class="protocol">SRU</systemitem> translator service supplied 
			by the <systemitem>Net::Z3950::Simple2ZOOM</systemitem><indexterm><primary>Simple2ZOOM</primary></indexterm> Perl module to enable Evergreen to act as a <systemitem 				class="protocol">Z39.50</systemitem> server. 
			You could run the <systemitem class="protocol">Z39.50</systemitem> server on a different machine. It just needs to be able to connect to the 
			Evergreen <systemitem class="protocol">SRU</systemitem> server.</para>
			<procedure>
				<title>Setting up the <systemitem class="protocol">Z39.50</systemitem> server</title>
				<step>
					<para>Install a recent version of yaz (the Makefile.install should have installed a suitable version).</para></step>
				<step>
					<para>Install <systemitem>Net::Z3950::Simple2ZOOM</systemitem> (<userinput>sudo cpan Net::Z3950::Simple2ZOOM</userinput>)</para></step>
				<step>
					<para>Create a <systemitem class="daemon">Simple2ZOOM</systemitem> configuration file. Something like the following is a good start, and is 
					based on the <systemitem class="daemon">Simple2ZOOM</systemitem> 
					documentation example. We'll name the file <filename>dgo.conf</filename> for our example:</para>	
<programlisting>
&lt;client&gt;
	&lt;database name="gapines"&gt;
		&lt;zurl&gt;http://dev.gapines.org/opac/extras/sru&lt;/zurl&gt;
		&lt;option name="sru"&gt;get&lt;/option&gt;
		&lt;charset&gt;marc-8&lt;/charset&gt;
		&lt;search&gt;
			&lt;querytype&gt;cql&lt;/querytype&gt;
			&lt;map use="4"&gt;&lt;index&gt;eg.title&lt;/index&gt;&lt;/map&gt;
			&lt;map use="7"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
			&lt;map use="8"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
			&lt;map use="21"&gt;&lt;index&gt;eg.subject&lt;/index&gt;&lt;/map&gt;
			&lt;map use="1003"&gt;&lt;index&gt;eg.author&lt;/index&gt;&lt;/map&gt;
			&lt;map use="1018"&gt;&lt;index&gt;eg.publisher&lt;/index&gt;&lt;/map&gt;
			&lt;map use="1035"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
			&lt;map use="1016"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
		&lt;/search&gt;
	&lt;/database&gt;
&lt;/client&gt;
</programlisting>
					<para>You can have multiple &lt;database&gt; sections in a single file, each pointing to a different scope of your consortium. The name attribute on 
					the &lt;database&gt; element is used in your <systemitem class="protocol">Z39.50</systemitem> connection string to name the database. The 
					<systemitem>&lt;zurl&gt;</systemitem>  element must point to 
					<uri>http://hostname/opac/extras/sru</uri>. As of Evergreen 1.6, you can append an optional organization unit shortname for search 
					scoping purposes, and you can also append <emphasis>/holdings</emphasis> if you want to expose the holdings for any returned records. So your zurl 
					could be <uri>http://dev.gapines.org/opac/extras/sru/BR1/holdings</uri> to limit the search scope to <emphasis role="bold">BR1</emphasis> and its children, and 
					to expose its holdings.</para>
				</step>
				<step>
					<para>Run <systemitem class="daemon">simple2ZOOM</systemitem> as a daemon, specifying the configuration files and one or more listener addresses that the 
					<systemitem class="protocol">Z39.50</systemitem> server will
					 be accessible on. If you do not specify a port, it will automatically run on port <systemitem>9999</systemitem>. In the following example, 
					we tell it to listen both to localhost on port <systemitem>2210</systemitem>, and on <systemitem class="domainname">dev.gapines.org</systemitem> 
					n port <systemitem>210</systemitem>:</para>
<programlisting>
 &lt;yazgfs&gt;
	&lt;server id="server1"&gt;
		&lt;retrievalinfo&gt;
			&lt;retrieval syntax="xml"/&gt;
			&lt;retrieval syntax="marc21"&gt;
			&lt;backend syntax="xml"&gt;
				&lt;marc inputformat="xml" outputformat="marc" inputcharset="utf-8" outputcharset="marc-8"/&gt;
			&lt;/backend&gt;
			&lt;/retrieval&gt;
		&lt;/retrievalinfo&gt;
	&lt;/server&gt;
&lt;/yazgfs&gt;
</programlisting>
				</step>
				<step>
					<para>Run <systemitem class="daemon">simple2ZOOM</systemitem> as a daemon, specifying the configuration files and one or more listener addresses that 
					the <systemitem class="protocol">Z39.50</systemitem> server will be accessible on. 
					If you do not specify a port, it will automatically run on port <systemitem>9999</systemitem>. In the following example, we tell it to listen both to localhost on 						port 2210, and on dev.gapines.org on port <systemitem>210</systemitem>:</para>
					<screen><userinput>simple2zoom -c dgo.conf -- -f xml2marc-yaz.cfg localhost:2210 dev.gapines.org:210</userinput></screen>
				</step>				
			</procedure>
			<para>To test the <systemitem class="protocol">Z39.50</systemitem> server, we can use <application>yaz-client</application> again:</para>
<screen>
yaz-client
Z&gt; open localhost:2210/gapines
Connecting...OK.
Sent initrequest.
Connection accepted by v3 target.
ID     : 81/81
Name   : Simple2ZOOM Universal Gateway/GFS/YAZ
Version: 1.03/1.128/3.0.34
Options: search present delSet triggerResourceCtrl scan sort namedResultSets
Elapsed: 0.010718
Z&gt; format marcxml
Z&gt; find <quote>dc.title=zone and dc.author=king</quote>
Sent searchRequest.
Received SearchResponse.
Search was a success.
Number of hits: 0, setno 4
records returned: 0
Elapsed: 0.611432
Z&gt; find <quote>dead zone</quote>
Sent searchRequest.
Received SearchResponse.
Search was a success.
Number of hits: 4, setno 5
records returned: 0
Elapsed: 1.555461
Z&gt; show 1
Sent presentRequest (1+1).
Records: 1
[]Record type: XML
&lt;record xmlns:... (rest of record deliberately truncated)
</screen>
	</section>
</chapter>

