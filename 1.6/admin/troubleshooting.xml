<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="troubleshooting">
	<title>Troubleshooting System Errors</title>
	<para>If you have Evergreen installed and are encountering systematic errors, here is the steps to find the 
	cause and solution to most problems. These instructions assume standard locations and file names for Evergreen
	installations, and may also include commands for specific Linux distributions.</para>
	<procedure>
		<title>Systematic Evergreen Restart to Isolate Errors</title>
		<step>
			<para>Stop Apache:</para><indexterm><primary>web server</primary><secondary>Apache</secondary><tertiery>stopping</tertiery></indexterm>
			<screen><userinput>/etc/init.d/apache2 stop</userinput></screen>
			<para>or</para>
			<screen><userinput>apache2ctl stop</userinput></screen>
		</step>
		<step>
			<para>Stop OpenSRF:</para><indexterm><primary>OpenSRF</primary></indexterm>
			<screen><userinput>osrf_ctl.sh -l -a stop_all</userinput></screen>
			<para>You should get either output simlar to this:</para>
<screen>
Stopping OpenSRF C process 12515...
Stopping OpenSRF C process 12520...
Stopping OpenSRF C process 12526...
Stopping OpenSRF Perl process 12471...
Stopping OpenSRF Router process 12466...
</screen>
			<para>Or, if services have already been stopped, output may look like this:</para>
			<screen>OpenSRF C not running</screen>
			<screen>OpenSRF Perl not running</screen>
			<screen>OpenSRF Router not running</screen>
			<para>Occasionally osrf_ctl.sh fails to kill OpenSRF processes, so we should check to make 
			sure that none are still running with the command:</para>
			<screen><userinput>ps -aef | grep OpenSRF</userinput></screen>
			<para>You should manually kill any OpenSRF processes.</para>
			<para>If you were unable to stop OpenSRF with the above methods, you could also try this 
			command:</para>
			<screen><userinput>rm â€“R /openils/var/run/*.pid</userinput></screen>
			<para>This will remove the temporary OpenSRF process files from the run directory which may 
			have been left over from a previous system boot cycle.</para>
		</step>
		<step>
			<para>Restart <systemitem class="service">Ejabberd</systemitem> and 
			<systemitem class="service">Memcached</systemitem> with the following commands:</para><indexterm><primary>Ejabberd</primary></indexterm>
			<screen><userinput>sudo /etc/init.d/ejabberd restart</userinput></screen>
			<screen><userinput>sudo /etc/init.d/memcached restart</userinput></screen><indexterm><primary>memcached</primary></indexterm>
		</step>
		<step>	
			<para>Start the OpenSRF <systemitem class="service">router</systemitem> and check for errors</para>
			<indexterm><primary>OpenSRF</primary><secondary>services</secondary><tertiery>router</tertiery></indexterm>
			<screen><userinput>/openils/bin/osrf_ctl.sh -l -a start_router</userinput></screen>
			<para>If the <systemitem class="service">router</systemitem> started correctly, output will be:</para>
			<screen>Starting OpenSRF Router</screen>
			<para>If <systemitem class="service">router</systemitem> does not start correctly, you should check the <systemitem class="service">router</systemitem> error log files 
			for error information.</para>
			<para>Evergreen 1.6 uses two routers, a public one and a private one, with two different 
			logfiles:</para>
			<para><filename >/openils/var/log/private.router.log</filename></para><indexterm><primary>logs</primary><secondary>router</secondary></indexterm>
			<para><filename >/openils/var/log/public.router.log</filename></para>
			<para>A quick way to find error information in the logs is with the grep command.</para>
				<screen>grep ERR /openils/var/log/*router.log</screen>
			<para>As a final sanity check, look for router processes using the process status 
			command:</para>
			<screen><userinput>ps -aef | grep Router</userinput></screen>
		</step>
		<step>
			<para>Start the OpenSRF <systemitem class="service">perl</systemitem> services and check for errors</para>
		<indexterm><primary>OpenSRF</primary><secondary>services</secondary><tertiery>perl</tertiery></indexterm>
			<screen><userinput>/openils/bin/osrf_ctl.sh -l -a start_perl</userinput></screen>
			<para>You should see the output similar to the following:</para>
<screen>
Starting OpenSRF Perl
* starting all services for ...
* starting service pid=7484 opensrf.settings
* starting service pid=7493 open-ils.cat
* starting service pid=7495 open-ils.supercat
* starting service pid=7497 open-ils.search
* starting service pid=7499 open-ils.circ
* starting service pid=7501 open-ils.actor
* starting service pid=7502 open-ils.storage
...
</screen>
			<para>If the <systemitem class="service">perl</systemitem> services do not start correctly or you receive errors, search for errors 
			in the following log files:</para>
			<itemizedlist>	
				<listitem>/openils/var/log/router.log</listitem>
				<listitem>/openils/var/log/osrfsys.log</listitem><indexterm><primary>logs</primary><secondary>osrfsys.log</secondary></indexterm>
			</itemizedlist>
			<para>At this point you can use the <command>grep</command> command to find errors in 
			any of the Evergreen log files:</para>
			<screen><userinput>grep ERR /openils/var/log/*.log</userinput></screen>
			<para>As a final sanity check, look for OpenSRF processes:</para>
			<screen><userinput>ps -aef | grep -i opensrf</userinput></screen>
		</step>
		<step>
			<para>Start the OpenSRF <systemitem class="service">c</systemitem> services and check for errors:</para>]
			<indexterm><primary>OpenSRF</primary><secondary>services</secondary><tertiery>C</tertiery></indexterm>
			<screen>/openils/bin/osrf_ctl.sh -l -a start_c</screen>
			<para>And output should be:</para>
			<screen>Starting OpenSRF C (host=localhost)</screen>
			<para>If the <systemitem class="service">c</systemitem> service does not start, check for errors by grepping 
			the log files for errors:</para>
			<screen><userinput>grep ERR /openils/var/log/*.log</userinput></screen>
			<para>Check for <application>OpenSRF</application> processes:</para>
			<screen><userinput>ps -aef | grep -i opensrf</userinput></screen>
		</step>
		<step>
			<para>Smoke test with <filename>autogen.sh</filename><indexterm><primary>autogen</primary></indexterm></para>
			<para>The <command>autogen</command> tool will take some dynamic information from the database and generate 
			static JavaScript <indexterm><primary>JavaScript</primary></indexterm> files for use by the OPAC and staff client. It is also able to refresh 
			the proximity map<indexterm><primary>proximity map</primary></indexterm> between libraries for the purpose of efficiently routing hold 
			requests.</para>
			<para>As user <systemitem class="username">opensrf</systemitem>, you invoke <command>autogen</command> with the command:</para>
			<screen><userinput>/openils/bin/autogen.sh -c /openils/conf/opensrf_core.xml -u</userinput></screen>
			<para>If Autogen completes successfully, the output will be:</para>
<screen>
Updating fieldmapper
Updating web_fieldmapper
Updating OrgTree
removing OrgTree from the cache...
Updating OrgTree HTML
Updating locales selection HTML
Updating Search Groups
Refreshing proximity of org units
Successfully updated the organization proximity
Done
</screen>
			<para>If Autogen does not complete its task and you receive errors, use 
			<command>grep</command> to find errors in the log files:</para>  
			<screen><userinput>grep ERR /openils/var/log/*.log</userinput></screen>
		</step>
		<step>
			<para>Connect to Evergreen using the <command>srfsh</command> command-line OpenSRF client<indexterm><primary>srfsh (command-line OpenSRF client)</primary></indexterm></para>
			<screen><userinput>/openils/bin/srfsh</userinput></screen>
			<note>
				<para>In order for you to connect using <command>srfsh</command>, you will need to 
				have set up the .srfsh.xml configuration file in your home directory as as 
				described in the installation chapter.</para>
			</note> 
			<para>You will then see the <emphasis>srfsh</emphasis> prompt:</para>
			<screen><prompt>srfsh#</prompt></screen>
			<para>At the srfsh prompt, enter this command:</para>
			<screen><userinput>login admin open-ils</userinput></screen>
			<para>You should the request verification:</para>
<screen>
Received Data: "6f63ff5542da1fead4431c6c280efc75"
------------------------------------
Request Completed Successfully
Request Time in seconds: 0.018414
------------------------------------

Received Data: {
"ilsevent":0,
"textcode":"SUCCESS",
"desc":" ",
"pid":7793,
"stacktrace":"oils_auth.c:312",
"payload":{
"authtoken":"28804ebf99508496e2a4d2593aaa930e",
 "authtime":420.000000
}
}

------------------------------------
Request Completed Successfully
Request Time in seconds: 0.552430
------------------------------------
Login Session: 28804.  Session timeout: 420.000
srfsh#</screen>        
			<para>If you encounter errors or if you are unable to connect, you should consult the 
			<filename>srfsh.log</filename> file. The location of this file is configured in your <indexterm><primary>logs</primary><secondary>srfsh.log</secondary></indexterm>
			<filename>.srfsh.xml</filename> configuration file and is 
			<filename>/openils/var/log/srfsh.log</filename> by default.</para>
			<para>Pressing 
				<keycombo>
					<keycap>Ctrl</keycap>
					<keycap>D</keycap>
				</keycombo>
			or entering <quote>exit</quote> will terminate srfsh.</para>
		</step>
		<step>
			<para>Start <application>Apache</application> and check for errors:</para>
			<indexterm><primary>web server</primary><secondary>Apache</secondary><tertiery>starting</tertiery></indexterm>
			<screen>/etc/init.d/apache2 start</screen>
			<para>or</para>
			<screen>apache2ctl start</screen>
			<para>You should see output:</para>
<screen>
* Starting web server apache2
...done.
</screen>
			<para>the Apache OpenSRF modules write to the 
			<filename>/openils/var/log/gateway.log</filename></para><indexterm><primary>logs</primary><secondary>gateway.log</secondary></indexterm>
			<para>However, you should check all of the log files for errors:</para>
			<screen>grep ERR /openils/var/log/*.log</screen>
			<para>Another place to check for errors is the <application>Apache</application> error logs
			generally located in in the <filename class="directory">/var/log/Apache2</filename> <indexterm><primary>logs</primary><secondary>Apache</secondary></indexterm>
			<indexterm><primary>Apache</primary><secondary>logs</secondary></indexterm>
			directory</para>
			<para>If you encounter errors with Apache, a common source of potential problems are the 
			Evergreen site configuration files <filename>/etc/apache2/eg_vhost.conf</filename> and 
			<filename>/etc/apache2/sites-available/eg.conf</filename></para>
			<indexterm><primary>configuration files</primary><secondary>Apache</secondary><tertiery>eg.conf</tertiery></indexterm>
			<indexterm><primary>configuration files</primary><secondary>Apache</secondary><tertiery>eg_vhost.conf</tertiery></indexterm>
		</step>
		<step>
			<para>Try to login from the <link linkend="staffclient-login">staff client</link></para>
		</step>
		<step>
			<para>Try to search the catalog from the OPAC</para>
		</step>	
	</procedure>	
</chapter>
