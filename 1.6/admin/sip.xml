<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="sipserver" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="EN"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
	<info>
        	<title>SIP Server</title>
	</info>
	<para><systemitem class="protocol">SIP</systemitem>, standing for <systemitem class="protocol">Standard Interchange Protocol</systemitem>, was developed by the 
	<orgname class="corporation">3M</orgname>corporation to be a common protocol for data transfer between ILS' 
	(referred to in <systemitem class="protocol">SIP</systemitem> as an <emphasis>ACS</emphasis>, or <emphasis>Automated Circulation System</emphasis>)
	<indexterm><primary>Automated Circulation System</primary></indexterm> and a 
	third party device. Originally, the protocol was developed for 
	use with 3M SelfCheck (often abbreviated SC, not to be confused with Staff Client) systems, but has since expanded to other companies and devices. It is now common to find 
	<systemitem class="protocol">SIP</systemitem> in use in several other vendors' SelfCheck systems<indexterm><primary>SelfCheck</primary></indexterm>, as well as other non-SelfCheck devices. 
	Some examples include:</para>
  	<itemizedlist>
		<listitem>Patron Authentication (computer access, subscription databases)</listitem>
		<listitem>Automated Material Handling (AMH) <indexterm><primary>Automated Material Handling (AMH)</primary></indexterm>- The automated sorting of items, often to bins or 
		book carts, based on shelving location or other programmable criteria</listitem>
	</itemizedlist>
   
	<section xml:id="Installing_SIP_Server">
		<info>
		<title>Installing the <systemitem class="protocol">SIP</systemitem> Server</title>
	   	</info>
		  <para>This is a rough intro to installing the <systemitem class="protocol">SIP</systemitem> server for Evergreen.</para>
		<simplesect xml:id="Gettingthecode">
			    <title>Getting the code</title>
				<para>Current <systemitem class="protocol">SIP</systemitem> code lives at github:</para>
				<screen><userinput>cd /opt</userinput></screen>
				<screen><userinput>git clone git://github.com/atz/SIPServer.git SIPServer</userinput></screen>
				<para>Or use the old style:</para>
				<screen><userinput>$ cd /opt</userinput></screen>
				<screen><userinput>$ sudo cvs -d:pserver:anonymous@openncip.cvs.sourceforge.net:/cvsroot/openncip login</userinput></screen>
				<para>When prompted for the CVS password, just hit Enter (sudo password may be req'd)</para>
				<screen><userinput>$ sudo cvs -z3 -d:pserver:anonymous@openncip.cvs.sourceforge.net:/cvsroot/openncip co -P SIPServer</userinput></screen>
							 
		</simplesect>
		<simplesect xml:id="Configuring_Server">
			<title>Configuring the Server</title>
			<procedure>
			<step>
				<para>Type the following commands from the command prompt:</para><indexterm><primary>configuration files</primary><secondary>oils_sip.xml</secondary></indexterm>
				<screen><userinput>$ sudo su opensrf</userinput></screen>
     		 		<screen><userinput>$ cd /openils/conf</userinput></screen>
      				<screen><userinput>$ cp oils_sip.xml.example oils_sip.xml</userinput></screen>
			</step>
			<step>
				<para>Edit <filename>oils_sip.xml</filename><indexterm><primary>configuration files</primary><secondary>oils_sip.xml</secondary></indexterm>. 
				Change the commented out &lt;server-params&gt; section to this:</para>
<programlisting>
&lt;server-params
min_servers='1'
min_spare_servers='0'
max_servers='25'
/&gt;
</programlisting>
			</step>
			<step>
				<para> max_servers will directly correspond to the number of allowed <systemitem class="protocol">SIP</systemitem> clients. Set the number accordingly, but 
				bear in mind that too many connections can 
				exhaust memory. On a 4G RAM/4 CPU server (that is also running evergreen), it is not recommended to exceed 100 
				<systemitem class="protocol">SIP</systemitem> client connections.</para>				
			</step>
			</procedure>		 
		</simplesect>
		<simplesect xml:id="Adding_SIP_users">
			<title>Adding <systemitem class="protocol">SIP</systemitem> Users</title>
			<procedure>
				<step>
					<para>Type the following commands from the command prompt:</para><indexterm><primary>configuration files</primary><secondary>oils_sip.xml</secondary></indexterm>
					<screen><userinput>$ sudo su opensrf</userinput></screen>
	     		 		<screen><userinput>$ cd /openils/conf</userinput></screen>
	      				<screen><userinput>$ cp oils_sip.xml.example oils_sip.xml</userinput></screen>
				</step>
				<step>
					<para> in the &lt;accounts&gt; section, add <systemitem class="protocol">SIP</systemitem> client login information. Make sure that all 
					<varname>&lt;logins&gt;</varname> use the same institution attribute, and make 
					sure the institution is listed in <varname>&lt;institutions&gt;</varname>. All attributes in the <varname>&lt;login&gt;</varname> section will be 
					used by the <systemitem class="protocol">SIP</systemitem> client.</para>
				
				</step>
				<step>
					<para> In Evergreen, create a new profile group called <systemitem class="groupname">SIP</systemitem>. 
					This group should be a sub-group of <systemitem class="groupname">Users</systemitem> 
					(not <systemitem class="groupname">Staff</systemitem> or <systemitem class="groupname">Patrons</systemitem>). 
					Set Editing Permission as <emphasis role="bold">group_application.user.sip_client</emphasis> and give the group the following permissions:</para>
					<literallayout>
					COPY_CHECKIN
					COPY_CHECKOUT
					RENEW_CIRC	
					VIEW_CIRCULATIONS
					VIEW_COPY_CHECKOUT_HISTORY	
					VIEW_PERMIT_CHECKOUT
					VIEW_USER
					VIEW_USER_FINES_SUMMARY
					VIEW_USER_TRANSACTIONS
					</literallayout>
					<para>OR use SQL like:</para>
<screen>
<userinput>
INSERT INTO permission.grp_tree (id,name,parent,description,application_perm)
VALUES (8, 'SIP', 1, 'SIP2 Client Systems', 'group_application.user.sip_client');

INSERT INTO permission.grp_perm_map (grp,perm,depth) 
VALUES (8,15,0),(8,16,0),(8,17,0),(8,31,0),(8,32,0),(8,48,0),(8,54,0),(8,75,0),(8,82,0);
</userinput>
</screen>
					
					<para>Verify:</para>
<screen>
<userinput>
SELECT *
FROM permission.grp_perm_map JOIN permission.perm_list ON
permission.grp_perm_map.perm=permission.perm_list.id
WHERE grp=8;
</userinput>
</screen>
					
					<para>Keep in mind that the id <emphasis role="bold">(8)</emphasis> may not necessarily be available on your system.</para>				
				</step>
				<step>
					<para>For each account created in the &lt;login&gt; section of <filename>oils_sip.xml</filename>, create a user (via the staff client user editor) 
					that has the same username 
					and password and put that user into the <systemitem class="groupname">SIP</systemitem> group.</para>
					<note><para>The expiration date will affect the <systemitem class="groupname">SIP</systemitem> users' connection so you might want to make a note of 
					this somewhere.</para></note>	
				</step>
			</procedure>		 
		</simplesect>
		<simplesect xml:id="Running_SIP_server">
			<title>Running the server</title>
				<para>To start the <systemitem class="protocol">SIP</systemitem> server type the following commands from the command prompt:</para>
				<screen><userinput>$ sudo su opensrf</userinput></screen>
				<screen><userinput>$ oils_ctl.sh -d /openils/var/run -s /openils/conf/oils_sip.xml -a [start|stop|restart]_sip</userinput></screen>	
		</simplesect>
		<simplesect xml:id="Logging-SIP">
			<title>Logging-SIP</title><indexterm><primary>SIP</primary></indexterm>
			<simplesect>
				<title><systemitem class="service">Syslog</systemitem></title>
				<para>It is useful to log <systemitem class="protocol">SIP</systemitem> requests to a separate file especially during initial setup by modifying your 
				syslog config file.</para><indexterm><primary>syslog</primary></indexterm>
				<procedure>
					<step>
						<para>Edit syslog.conf.</para>
						<screen><userinput>$ sudo vi /etc/syslog.conf  # maybe /etc/rsyslog.conf</userinput></screen>	
					</step>
					<step>
						<para>Add this:</para>
						<programlisting>local6.*                -/var/log/SIP_evergreen.log</programlisting>	
					</step>
					<step>
						<para><systemitem class="service">Syslog</systemitem> expects the logfile to exist so create the file.</para>
						<screen><userinput>$ sudo touch /var/log/SIP_evergreen.log</userinput></screen>	
					</step>
					<step>
						<para>Restart <systemitem class="service">sysklogd</systemitem>.</para>
						<screen><userinput>$ sudo /etc/init.d/sysklogd restart</userinput></screen>	
					</step>
				</procedure>		
			</simplesect>
			<simplesect>
				<title><systemitem class="service">Syslog-NG</systemitem></title>
				
				<procedure>
					<step>
						<para>Edit logging config.</para><indexterm><primary>syslog-NG</primary></indexterm>
						<screen><userinput>sudo vi /etc/syslog-ng/syslog-ng.conf</userinput></screen>	
					</step>
					<step>
						<para>Add:</para>
<programlisting>
# SIP2 for Evergreen
filter    f_eg_sip { level(warn, err, crit) and facility(local6); };
destination eg_sip { file("/var/log/SIP_evergreen.log"); };
log { source(s_all); filter(f_eg_sip); destination(eg_sip); };
</programlisting>	
					</step>
					<step>
						<para><systemitem class="service">Syslog-ng</systemitem> expects the logfile to exist so create the file.</para>
						<screen><userinput>$ sudo touch /var/log/SIP_evergreen.log</userinput></screen>	
					</step>
					<step>
						<para>Restart <systemitem class="service">syslog-ng</systemitem></para>
						<screen><userinput>$ sudo /etc/init.d/syslog-ng restart</userinput></screen>	
					</step>
				</procedure>		
			</simplesect>
		</simplesect>	
		<simplesect xml:id="Testing_SIP_Connection">
			<title>Testing Your <systemitem class="protocol">SIP</systemitem> Connection</title><indexterm><primary>SIP</primary></indexterm>
			<itemizedlist>
				<listitem>
					<para>In the top level CVS checkout of the SIPServer code.</para>
					<screen><userinput>$ cd SIPServer/t</userinput></screen>
				</listitem>
				<listitem>
					<para> Edit <filename>SIPtest.pm</filename>, change the <varname>$instid</varname>, <varname>$server</varname>, <varname>$username</varname>, and 
					<varname>$password</varname> variables. This will be enough to test connectivity. 
					To run all tests, you'll need to change all the variables in the Configuration section.</para>
					<screen><userinput>$ PERL5LIB=../ perl 00sc_status.t</userinput></screen>
					<para>This should produce something like:</para>
<screen>
1..4
ok 1 - Invalid username
ok 2 - Invalid username
ok 3 - login
ok 4 - SC status
</screen>
				</listitem>	
				<listitem>
					<para> Don't be dismayed at <emphasis role="bold">Invalid Username</emphasis>. That's just one of the many tests that are run.</para>
				</listitem>						
			</itemizedlist>
		</simplesect>
		<simplesect xml:id="SIP-More_Testing">
			<title>More Testing</title>
			<procedure>
				<step>
					<para>Once you have opened up either the <systemitem class="protocol">SIP</systemitem> OR <systemitem class="protocol">SIP2</systemitem> ports to be 
					accessible from outside you can do some testing via <systemitem class="protocol">telnet</systemitem>. You can try this with localhost 
					if you so wish, but we want to prove that <systemitem class="protocol">SIP2</systemitem> works from non-localhost. 
					Replace <varname>$instid</varname>, <varname>$server</varname>, <varname>$barcode</varname>, <varname>$username</varname>, 
					and <varname>$password</varname> variables below as necessary.</para>
					<note><para>We are using <systemitem>6001</systemitem> here which is associated with <systemitem class="protocol">SIP2</systemitem> as per our configuration.</para></note><indexterm><primary>telnet</primary></indexterm>
<screen>
<userinput>$ telnet $server 6001</userinput>
Connected to $server.
Escape character is '^]'.
<userinput>9300CN**$username**|CO**$password**|CP**$instid**</userinput>
</screen>					
					<para>You should get back.</para>
					<screen>941</screen>
				</step>
				<step>
					<para>Now just copy in the following line (with variables replaced) you don't need to hit enter, just paste!</para>
					<screen>2300120080623    172148AO**$instid**|AA**$barcode**|AC$password|AD**$password**</screen>
					<para>You will get back the patron information for $barcode (something similar to the what's below).</para>
					<screen>24  Y           00120100113    170738AEFirstName MiddleName LastName|AA**$barcode**|BLY|CQY|BHUSD|BV0.00|AFOK|AO**$instid**|</screen>
					<para>The response declares it is a valid patron <varname>BLY</varname> with a valid password <varname>CQY</varname> and shows the user's 
					<varname>$name</varname>.</para>
				</step>
			</procedure>
		</simplesect>
	</section>
	<section xml:id="SIP_Communication">
		<info>
			<title><systemitem class="protocol">SIP</systemitem> Communication</title><indexterm><primary>SIP</primary></indexterm>
	   	</info>
		<para><systemitem class="protocol">SIP</systemitem> generally communicates over a <systemitem class="protocol">TCP</systemitem> connection (either raw sockets or over 
		<systemitem class="protocol">telnet</systemitem>), but can also communicate via serial connections and other methods. In Evergreen, 
		the most common deployment is a <systemitem class="protocol">RAW</systemitem> socket connection on port <systemitem>6001</systemitem>.</para>
		<para><systemitem class="protocol">SIP</systemitem> communication consists of strings of messages, each message request and response begin with a 2-digit 
		<quote>command</quote> - Requests usually being an odd 
		number and responses usually increased by 1 to be an even number. The combination numbers for the request command and response is often referred to as a 
		<emphasis>Message Pair</emphasis> (for example, a 23 command is a request for patron status, a 24 response is a patron status, and the message pair 23/24 is 
		patron status message pair). The table in the next section shows the message pairs and a description of them.</para>
		<para>For clarification, the <quote>Request</quote> is from the device (selfcheck or otherwise) to the ILS/ACS. The response is… the response 
		to the request ;).</para>
		<para>Within each request and response, a number of fields (either a fixed width or separated with a <emphasis role="bold">|</emphasis> [pipe symbol] and preceeded with a 
		2-character field identifier) 
		are used. The fields vary between message pairs.</para>
 		<informaltable>
            		<tgroup cols="4">
				<colspec colnum="1" colname="pair" colwidth="0.5*"/>
				<colspec colnum="2" colname="name" colwidth="1.0*"/>
				<colspec colnum="3" colname="supported" colwidth="1.0*"/>
				<colspec colnum="4" colname="details" colwidth="3.0*"/>
                		<thead>
                    			<row>
						<entry>Pair</entry>
						<entry>Name</entry>
						<entry>Supported?</entry>
						<entry>Details</entry>
                   	 		</row>
                		</thead>
                		<tbody>
					<row>
                        			<entry>01</entry>
						<entry>Block Patron</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_Block_Patron'>01_Block_Patron</link> - ACS responds with 24 Patron Status Response</entry>
                    			</row>
					<row>
                        			<entry>09/10</entry>
						<entry>Checkin</entry>
						<entry>Yes (with extensions)</entry>
						<entry><link linkend='SIP_Checkin'>09/10_Checkin</link></entry>
                    			</row>
					<row>
                        			<entry>11/12</entry>
						<entry>Checkout</entry>
						<entry>Yes (no renewals)</entry>
						<entry><link linkend='SIP_Checkout'>11/12_Checkout</link></entry>
                    			</row>
					<row>
                        			<entry>15/16</entry>
						<entry>Hold</entry>
						<entry>No</entry>
						<entry><link linkend='SIP_Hold'>15/16_Hold</link></entry>
                    			</row>
					<row>
                        			<entry>17/18</entry>
						<entry>Item Information</entry>
						<entry>Yes (no extensions)</entry>
						<entry><link linkend='SIP_Item_Information'>17/18_Item_Information</link></entry>
                    			</row>
					<row>
                        			<entry>19/20</entry>
						<entry>Item Status Update</entry>
						<entry>No</entry>
						<entry><link linkend='SIP_Item_Status_Update'>19/20_Item_Status_Update</link> - Returns Patron Enable response, but doesn't make any changes in EG</entry>
                    			</row>
					<row>
                        			<entry>23/24</entry>
						<entry>Patron Status</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_Patron_Status'>23/24_Patron_Status</link> - 63/64 <quote>Patron Information</quote> preferred</entry>
                    			</row>
					<row>
                        			<entry>25/26</entry>
						<entry>Patron Enable</entry>
						<entry>No</entry>
						<entry><link linkend='SIP_Patron_Enable'>25/26_Patron_Enable</link> - Used during system testing and validation</entry>
                    			</row>
					<row>
                        			<entry>29/30</entry>
						<entry>Renew</entry>
						<entry>NO (maybe?)</entry>
						<entry><link linkend='SIP_Renew'>29/30_Renew</link></entry>
                    			</row>
					<row>
                        			<entry>35/36</entry>
						<entry>End Session</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_End_Session'>35/36_End_Session</link></entry>
                    			</row>
					<row>
                        			<entry>37/38</entry>
						<entry>Fee Paid</entry>
						<entry>No</entry>
						<entry><link linkend='SIP_Fee_Paid'>37/38_Fee_Paid</link></entry>
                    			</row>
					<row>
                        			<entry>63/64</entry>
						<entry>Patron Information</entry>
						<entry>Yes (no extensions)</entry>
						<entry><link linkend='SIP_Patron_Information'>63/64_Patron_Information</link></entry>
                    			</row>
					<row>
                        			<entry>65/66</entry>
						<entry>Renew All</entry>
						<entry>No</entry>
						<entry><link linkend='SIP_Renew_All'>65/66_Renew_All</link></entry>
                    			</row>
					<row>
                        			<entry>93/94</entry>
						<entry>Login</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_Login'>93/94_Login</link> - Must be first command to Evergreen ACS (via socket) or <systemitem class="protocol">SIP</systemitem> will terminate</entry>
                    			</row>
					<row>
                        			<entry>97/96</entry>
						<entry>Resend last message</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_Resend'>97/96_Resend</link></entry>
                    			</row>
					<row>
                        			<entry>99/98</entry>
						<entry>SC/ACS Status</entry>
						<entry>Yes</entry>
						<entry><link linkend='SIP_SC_ACS_Status'>99/98_SC_and_ACS_Status</link></entry>
                    			</row>
                		</tbody>
            		</tgroup>
        	</informaltable>
		<simplesect xml:id="SIP_Block_Patron">
			<title>01 Block Patron</title>
			<para>A selfcheck will issue a <command>Block Patron</command> command if a patron leaves their card in a selfcheck machine or if the selfcheck detects tampering (such as attempts 
			to disable multiple items during a single item checkout, multiple failed pin entries, etc).</para><indexterm><primary>SelfCheck</primary></indexterm>
			<para>In Evergreen, this command does the following:</para>
				<itemizedlist>
					<listitem>User alert message: <emphasis>CARD BLOCKED BY SELF-CHECK MACHINE</emphasis> (this is independent of the AL 
					<emphasis>Blocked Card Message</emphasis> field).</listitem>
					<listitem>Card is marked inactive.</listitem>
				</itemizedlist>
			<para>The request looks like:</para>
			<screen>01&lt;card retained&gt;&lt;date&gt;[fields AO, AL, AA, AC]</screen>
			<para><emphasis>Card Retained</emphasis>: A single character field of <emphasis>Y</emphasis> or <emphasis>N</emphasis> - tells the ACS whether the SC has 
			retained the card (ex: left in the machine) or not.</para> 
			<para><emphasis>Date</emphasis>: An 18 character field for the date/time when the block occurred.</para> 
			<para><emphasis>Format</emphasis>: YYYYMMDDZZZZHHMMSS (ZZZZ being zone - 4 blanks when local time, <quote> Z</quote> (3 blanks and a Z) represents UTC(GMT/Zulu)</para>
			<para><emphasis>Fields</emphasis>: See <link linkend='SIP_Fields'>Fields</link> for more details.</para>
			<para>The response is a 24 <quote>Patron Status Response</quote> with the following:</para>
			<itemizedlist>
					<listitem>Charge privileges denied</listitem>
					<listitem>Renewal privileges denied</listitem>
					<listitem>Recall privileges denied (hard-coded in every 24 or 64 response)</listitem>
					<listitem>hold privileges denied</listitem>
					<listitem>Screen Message 1 (AF): <emphasis>blocked</emphasis></listitem>
					<listitem>Patron</listitem>

			</itemizedlist>
		</simplesect>
		<simplesect xml:id="SIP_Checkin">
			<title>09/10 Checkin</title>
			<para>The request looks like:</para>
			<screen>09&lt;No block (Offline)&gt;&lt;xact date&gt;&lt;return date&gt;[Fields AP,AO,AB,AC,CH,BI]</screen>
			<para><emphasis>No Block (Offline)</emphasis>: A single character field of <emphasis>Y</emphasis> or <emphasis>N</emphasis> - Offline transactions are not currently 
			supported so send <emphasis>N</emphasis>.</para> 
			<para><emphasis>xact date</emphasis>: an 18 character field for the date/time when the checkin occurred. Format: YYYYMMDDZZZZHHMMSS (ZZZZ being zone - 
			4 blanks when local time, <quote> Z</quote> (3 blanks and a Z) represents UTC(GMT/Zulu)</para> 
			<para><emphasis>Fields</emphasis>: See <link linkend='SIP_Fields'>Fields</link> for more details.</para>
			<para>The response is a 10 <quote>Checkin Response</quote> with the following:</para>
			<screen>10&lt;resensitize>&lt;magnetic media&gt;&lt;alert&gt;&lt;xact date&gt;[Fields AO,AB,AQ,AJ,CL,AA,CK,CH,CR,CS,CT,CV,CY,DA,AF,AG]</screen>
			<para>Example (with a remote hold):</para>
			<screen>09N20100507    16593720100507    165937APCheckin Bin 5|AOBR1|AB1565921879|ACsip_01|</screen>
<screen>
101YNY20100623    165731AOBR1|AB1565921879|AQBR1|AJPerl 5 desktop reference|CK001|CSQA76.73.P33V76 1996
|CTBR3|CY373827|DANicholas Richard Woodard|CV02|
</screen>
			<para>Here you can see a hold alert for patron <varname>CY</varname> <emphasis>373827</emphasis>, named <varname>DA</varname> <emphasis>Nicholas Richard Woodard</emphasis>, 
			to be picked up at <varname>CT</varname> <quote>BR3</quote>. Since the transaction is happening 
			at <varname>AO</varname> <quote>BR1</quote>, the alert type <varname>CV</varname> is 02 for <emphasis>hold at remote library</emphasis>. 
			The possible values for <varname>CV</varname> are:</para>
			<itemizedlist>
					<listitem>00: unknown</listitem>
					<listitem>01: local hold</listitem>
					<listitem>02: remote hold</listitem>
					<listitem>03: ILL transfer (not used by EG)</listitem>
					<listitem>04: transfer</listitem>
					<listitem>99: other</listitem>
			</itemizedlist>
			<note>
				<para>the logic for Evergreen to determine the content is magnetic_media comes from either legacy circ scripts or search_config_circ_modifier. 
				The default is non-magnetic.<indexterm><primary>magnetic media</primary></indexterm> 
				The same is true for media_type (default 001). Evergreen does not populate the collection_code because it does not really have any, but it will provide the 
				call_number where available.</para>
				<para>Unlike the <varname>item_id</varname> (barcode), the <varname>title_id</varname> is actually a title string, unless the configuration forces the return of 
				the bib ID.</para>
				<para>Don't be confused by the different branches that can show up in the same response line.</para>
				<itemizedlist>
					<listitem><varname>AO</varname> is where the transaction took place,</listitem>
					<listitem><varname>AQ</varname> is the <quote>permanent location</quote>, and</listitem>
					<listitem><varname>CT</varname> is the <emphasis>destination location</emphasis> (i.e., pickup lib for a hold or target lib for a transfer).</listitem>
				</itemizedlist>
			</note>
		</simplesect>
		<simplesect xml:id="SIP_Checkout">
			<title>11/12 Checkout</title>
		</simplesect>
		<simplesect xml:id="SIP_Hold">
			<title>15/16 Hold</title>
			<para>Not yet supported.</para>
		</simplesect>
		<simplesect xml:id="SIP_Item_Information">
			<title>17/18 Item Information</title>
			<para>The request looks like:</para>
			<screen>17&lt;xact_date&gt;[fields: AO,AB,AC]</screen>
			<para>The request is very terse. <varname>AC</varname> is optional.</para>
			<para>The following response structure is for <systemitem class="protocol">SIP2</systemitem>. (Version 1 of the protocol had only 6 total fields.)</para>
			<screen>18&lt;circulation_status&gt;&lt;security_marker&gt;&lt;fee_type&gt;&lt;xact_date&gt;[fields: CF,AH,CJ,CM,AB,AJ,BG,BH,BV,CK,AQ,AP,CH,AF,AG,+CT,+CS]</screen>
			<para>Example:</para>
			<screen>1720060110    215612AOBR1|ABno_such_barcode|</screen>
			<screen>1801010120100609    162510ABno_such_barcode|AJ|</screen>
			<screen>1720060110    215612AOBR1|AB1565921879|</screen>
			<screen>1810020120100623    171415AB1565921879|AJPerl 5 desktop reference|CK001|AQBR1|APBR1|BGBR1|CTBR3|CSQA76.73.P33V76 1996|</screen>
			<para>The first case is with a bogus barcode. The latter shows an item with a circulation_status of <emphasis>10</emphasis> for <emphasis>in transit between libraries</emphasis>. 
			The known values of <varname>circulation_status</varname> are enumerated in the spec.</para>
			<para>EXTENSIONS: The <varname>CT</varname> field for <emphasis>destination location</emphasis> and <varname>CS</varname> <emphasis>call number</emphasis> are used by 
			Automated Material Handling systems.</para><indexterm><primary>Automated Material Handling (AMH)</primary></indexterm>
		</simplesect>
		<simplesect xml:id="SIP_Item_Status_Update">
			<title>19/20 Item Status Update</title>
		</simplesect>
		<simplesect xml:id="SIP_Patron_Status">
			<title>23/24 Patron Status</title>
			<para>Example:</para>
			<screen>2300120060101    084235AOUWOLS|AAbad_barcode|ACsip_01|ADbad_password|</screen>
			<screen>24YYYY          00120100507    013934AE|AAbad_barcode|BLN|AOUWOLS|</screen>
			<screen>2300120060101    084235AOCONS|AA999999|ACsip_01|ADbad_password|</screen>
			<screen>24  Y           00120100507    022318AEDoug Fiander|AA999999|BLY|CQN|BHUSD|BV0.00|AFOK|AOCONS|</screen>
			<screen>2300120060101    084235AOCONS|AA999999|ACsip_01|ADuserpassword|LY|CQN|BHUSD|BV0.00|AFOK|AOCONS|</screen>
			<screen>24  Y           00120100507    022803AEDoug Fiander|AA999999|BLY|CQY|BHUSD|BV0.00|AFOK|AOCONS|</screen>
			<orderedlist>
				<listitem>The <varname>BL</varname> field (<systemitem class="protocol">SIP2</systemitem>, optional) is <emphasis>valid patron</emphasis>, so the 
				<emphasis>N</emphasis> value means 
				<emphasis>bad_barcode</emphasis> doesn't match a patron, the <emphasis>Y</emphasis> value means 999999 does.</listitem>
				<listitem>The <varname>CQ</varname> field (<systemitem class="protocol">SIP2</systemitem>, optional) is <emphasis>valid password</emphasis>, so the <emphasis>N</emphasis> 
				value means <emphasis>bad_password</emphasis> doesn't match 999999's password, the <emphasis>Y</emphasis> means <emphasis>userpassword</emphasis> 
				does.</listitem>
			</orderedlist>
			<para>So if you were building the most basic <systemitem class="protocol">SIP2</systemitem> authentication client, you would check for 
			<emphasis>|CQY|</emphasis> in the response to know the user's barcode and password 
			are correct (<varname>|CQY|</varname> implies <varname>|BLY|</varname>, since you cannot check the password unless the barcode exists). However, in practice, 
			depending on the application, there are other factors to consider in authentication, like whether the user is blocked from checkout, owes excessive fines, reported their 
			card lost, etc. These limitations are reflected in the 14-character <emphasis>patron status</emphasis> string immediately following the <emphasis>24</emphasis> code. 
			See the field definitions in your copy of the spec.</para>
		</simplesect>
		<simplesect xml:id="SIP_Patron_Enable">
			<title>25/26 Patron Enable</title>
			<para>Not yet supported.</para>
		</simplesect>
		<simplesect xml:id="SIP_Renew">
			<title>29/30 Renew</title>
			<para>Evergreen ACS status message indicates <emphasis>renew</emphasis> is supported.</para>
		</simplesect>
		<simplesect xml:id="SIP_End_Session">
			<title>35/36 End Session</title>
			<screen>3520100505    115901AOBR1|AA999999|</screen>
			<screen>36Y20100507    161213AOCONS|AA999999|AFThank you!|</screen>
			<para>The <emphasis>Y/N</emphasis> code immediately after the 36 indicates <emphasis>success/failure</emphasis>. Failure is not particularly meaningful or 
			important in this context, and for evergreen it is hardcoded <emphasis>Y</emphasis>.</para>	
		</simplesect>
		<simplesect xml:id="SIP_Fee_Paid">
			<title>37/38 Fee Paid</title>
			<para>Not implemented.</para>
		</simplesect>
		<simplesect xml:id="SIP_Patron_Information">
			<title>63/64 Patron Information</title>
			<para>Attempting to retrieve patron info with a bad barcode:</para>
			<screen>6300020060329    201700          AOBR1|AAbad_barcode|</screen>
			<screen>64YYYY          00020100623    141130000000000000000000000000AE|AAbad_barcode|BLN|AOBR1|</screen>
			<para>Attempting to retrieve patron info with a good barcode (but bad patron password):</para>
			<screen>6300020060329    201700          AOBR1|AA999999|ADbadpwd|</screen>
<screen>
64  Y           00020100623    141130000000000000000000000000AA999999|AEDavid J. Fiander|BHUSD|BV0.00
|BD2 Meadowvale Dr. St Thomas, ON Canada
</screen>
			<screen>90210|BEdjfiander@somemail.com|BF(519) 555 1234|AQBR1|BLY|CQN|PB19640925|PCPatrons|PIUnfiltered|AFOK|AOBR1|</screen>
			<para>See <link linkend='SIP_Patron_Status'>23/24 Patron Status</link> for info on <varname>BL</varname> and <varname>CQ</varname> fields.</para>
		</simplesect>
		<simplesect xml:id="SIP_Renew_All">
			<title>65/66 Renew All</title>
			<para>Not yet supported.</para>
		</simplesect>
		<simplesect xml:id="SIP_Login">
			<title>93/94 Login</title>
			<para>Example:</para>
			<screen>9300CNsip_01|CObad_value|CPBR1|</screen>
			<screen>[Connection closed by foreign host.]</screen>
			<screen>...</screen>
			<screen>9300CNsip_01|COsip_01|CPBR1|</screen>
			<screen>941</screen>
			<para><emphasis>941</emphasis> means successful terminal login. <emphasis>940</emphasis> or getting dropped means failure.</para>
		</simplesect>
		<simplesect xml:id="SIP_Resend">
			<title>97/96 Resend</title>
		</simplesect>
		<simplesect xml:id="SIP_SC_ACS_Status">
			<title>99/98 SC and ACS Status</title>
			<screen>99&lt;status code&gt;&lt;max print width&gt;&lt;protocol version&gt;</screen>
			<para>All 3 fields are required:</para>
			<itemizedlist>
					<listitem>status code - 1 character:</listitem>
					<itemizedlist>
						<listitem>0: SC is OK</listitem>
						<listitem>1: SC is out of paper</listitem>
						<listitem>2: SC shutting down</listitem>		
					</itemizedlist>
					<listitem>max print width - 3 characters - the integer number of characters the client can print</listitem>
					<listitem>protocol version - 4 characters - x.xx</listitem>
			</itemizedlist>
			<screen>98&lt;on-line status&gt;&lt;checkin ok&gt;&lt;checkout ok&gt;&lt;ACS renewal policy&gt;&lt;status update ok&gt;&lt;offline ok&gt;&lt;timeout period&gt;</screen>
			<screen>&lt;retries allowed&gt;&lt;date/time sync&gt;&lt;protocol version&gt;&lt;institution id&gt;&lt;library name&gt;&lt;supported messages&gt;&lt;terminal</screen> 
			<screen>location&gt;&lt;screen message&gt;&lt;print line&gt;</screen>
			<para>Example:</para>
			<screen>9910302.00</screen>
			<screen>98YYYYNN60000320100510    1717202.00AOCONS|BXYYYYYYYYYNYNNNYN|</screen>
			<para>The Supported Messages field <varname>BX</varname> appears only in <systemitem class="protocol">SIP2</systemitem>, and specifies whether 16 different 
			<systemitem class="protocol">SIP</systemitem>  commands are supported by the ACS or not.</para>
		</simplesect>
		<simplesect xml:id="SIP_Fields">
			<title>Fields</title>
			<para>All fixed-length fields in a communication will appear before the first variable-length field. This allows for simple parsing. Variable-length fields are by 
			definition delimited, though there will not necessarily be an initial delimiter between the last fixed-length field and the first variable-length one. It would be 
			unnecessary, since you should know the exact position where that field begins already.</para>
		</simplesect>
	</section>
</chapter>

