<?xml version="1.0" encoding="utf-8"?>
<chapter xml:id="z3950" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="EN"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
    <info>
        <title>SRU and Z39.50 Server</title>
    </info>

    <para>Evergreen is extremely scalable and can serve the need of a large range of libraries. The specific requirements and configuration of your system should be determined based on your 
	specific needs of your organization or consortium.</para>
    
	<section xml:id="Testing_SRU_yaz-client">
	        <info>
	            <title>Testing SRU with yaz-client</title>
	        </info>	
			 <para>yaz-client is installed as a part of Index Data's YAZ software. Recent versions include support for querying SRU servers. Evergreen ships an SRU configuration 
			that works out of the box. To search Evergreen with yaz-client, choose the <emphasis>GET</emphasis> query method and issue the <emphasis>find</emphasis> command. 
			In the following example, we connect to the Evergreen test server <emphasis>dev.gapines.org</emphasis>; substitute this hostname with your own Evergreen server 
			hostname:</para>
			<screen>
			$ yaz-client http://dev.gapines.org/opac/extras/sru
			Z> sru GET 1.1
			Z> find hemingway
			</screen>
			 <para>If your database has records that match that term, you will get the corresponding MARCXML records in your response from yaz-client.</para>
			 <para>Here's what the SRU request looks like as sent to the Evergreen web server:</para>
			 <screen>GET /opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0</screen>
			<para>You can see what the response looks like by hitting the same URL in your Web browser: 
			<ulink url="http://dev.gapines.org/opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0">
			http://dev.gapines.org/opac/extras/sru?version=1.1&amp;operation=searchRetrieve&amp;query=hemingway&amp;maximumRecords=0</ulink>
			CQL queries</para>
			 <para>Evergreen supports some CQL index-sets for advanced queries such as a subset of Dublin Core (DC) elements. Those DC elements that are 
			supported map to Evergreen default indexes as follows:</para>
			<informaltable xml:id="dc_elements">
			
			<tgroup cols="2">
				<thead>
					<row>
						<entry>DC element </entry>
						<entry>Evergreen index</entry>
						
					</row>
				</thead>
				<tbody>
					<row>
						<entry>title</entry>
						<entry>title</entry>				
					</row>
					<row>
						<entry>creator </entry>
						<entry>author</entry>				
					</row>
					<row>
						<entry>contributor</entry>
						<entry>author</entry>				
					</row>
					<row>
						<entry>publisher</entry>
						<entry>keyword</entry>				
					</row>
					<row>
						<entry>subject</entry>
						<entry>subject</entry>				
					</row>
					<row>
						<entry>identifier</entry>
						<entry>keyword</entry>				
					</row>
					<row>
						<entry>type</entry>
						<entry>none</entry>				
					</row>
					<row>
						<entry>format</entry>
						<entry>none</entry>				
					</row>
					<row>
						<entry>language</entry>
						<entry>lang</entry>				
					</row>
				</tbody>
			</tgroup>
			</informaltable>
			<para>Here are a few examples of SRU searches against some of these indexes:</para>
			<itemizedlist>
				<listitem>dc.title all <quote>complete dinosaur</quote></listitem>
				<listitem>dc.subject all <quote>britain france</quote></listitem>
				<listitem>dc.title exact <quote>The Empire Strikes Back</quote></listitem>
				<listitem>dc.author=king and dc.title=zone</listitem>
			</itemizedlist>

	</section>
	<section xml:id="Z3950serversupport">
	        <info>
	            <title>Setting up Z39.50 server support</title>
	        </info>	

			<note><para>You must have Evergreen's SRU server running before you can enable Z39.50 server support.</para></note>			 
			<para>This support uses an Z39.50-to-SRU translator service supplied by the <emphasis>Net::Z3950::Simple2ZOOM</emphasis> Perl module to enable Evergreen to act as a Z39.50 server. 
			You could run the Z39.50 server on a different machine. It just needs to be able to connect to the Evergreen SRU server.</para>
			<procedure>
				<title>Setting up the Z39.50 server</title>
				<step>
					<para>Install a recent version of yaz (the Makefile.install should have installed a suitable version).</para></step>
				<step>
					<para>Install Net::Z3950::Simple2ZOOM (sudo cpan Net::Z3950::Simple2ZOOM)</para></step>
				<step>
					<para>Create a Simple2ZOOM configuration file. Something like the following is a good start, and is based on the Simple2ZOOM documentation example. 
					We'll name the file dgo.conf for our example:</para>	
 					<screen>
					&lt;client&gt;
        			 		&lt;database name="gapines"&gt;
           						&lt;zurl&gt;http://dev.gapines.org/opac/extras/sru&lt;/zurl&gt;
           						&lt;option name="sru"&gt;get&lt;/option&gt;
           						&lt;charset&gt;marc-8&lt;/charset&gt;
           						&lt;search&gt;
            							&lt;querytype&gt;cql&lt;/querytype&gt;
             							&lt;map use="4"&gt;&lt;index&gt;eg.title&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="7"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="8"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="21"&gt;&lt;index&gt;eg.subject&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="1003"&gt;&lt;index&gt;eg.author&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="1018"&gt;&lt;index&gt;eg.publisher&lt;/index&gt;&lt;/map&gt;
            							&lt;map use="1035"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
             							&lt;map use="1016"&gt;&lt;index&gt;eg.keyword&lt;/index&gt;&lt;/map&gt;
           						&lt;/search&gt;
         					&lt;/database&gt;
      					&lt;/client&gt;
					</screen>
					<para>You can have multiple &lt;database&gt; sections in a single file, each pointing to a different scope of your consortium. The name attribute on 
					the &lt;database&gt; element is used in your Z39.50 connection string to name the database. The &lt;zurl&gt; element must point to 
					<emphasis>http://hostname/opac/extras/sru</emphasis>. As of Evergreen 1.6, you can append an optional organization unit shortname for search 
					scoping purposes, and you can also append <emphasis>/holdings</emphasis> if you want to expose the holdings for any returned records. So your zurl 
					could be <emphasis>http://dev.gapines.org/opac/extras/sru/BR1/holdings</emphasis> to limit the search scope to BR1 and its children, and 
					to expose its holdings.</para>
				</step>
				<step>
					<para>Run simple2ZOOM as a daemon, specifying the configuration files and one or more listener addresses that the Z39.50 server will be accessible on. 
					If you do not specify a port, it will automatically run on port 9999. In the following example, we tell it to listen both to localhost on port 2210, 
					and on dev.gapines.org on port 210:</para>
					<screen>
					 &lt;yazgfs&gt;
          					&lt;server id="server1"&gt;
          						&lt;retrievalinfo&gt;
		      						&lt;retrieval syntax="xml"/&gt;
		      						&lt;retrieval syntax="marc21"&gt;
		          					&lt;backend syntax="xml"&gt;
		              						&lt;marc inputformat="xml" outputformat="marc" inputcharset="utf-8" outputcharset="marc-8"/&gt;
		          					&lt;/backend&gt;
		      						&lt;/retrieval&gt;
          						&lt;/retrievalinfo&gt;
          					&lt;/server&gt;
      					&lt;/yazgfs&gt;
					</screen>
				</step>
				<step>
					<para>Run simple2ZOOM as a daemon, specifying the configuration files and one or more listener addresses that the Z39.50 server will be accessible on. 
					If you do not specify a port, it will automatically run on port 9999. In the following example, we tell it to listen both to localhost on port 2210, 
					and on dev.gapines.org on port 210:</para>
					<command>simple2zoom -c dgo.conf -- -f xml2marc-yaz.cfg localhost:2210 dev.gapines.org:210</command>
				</step>				
			</procedure>
			<para>To test the Z39.50 server, we can use yaz-client again:</para>]
			<screen>
			yaz-client
			Z&gt; open localhost:2210/gapines
			Connecting...OK.
			Sent initrequest.
			Connection accepted by v3 target.
			ID     : 81/81
			Name   : Simple2ZOOM Universal Gateway/GFS/YAZ
			Version: 1.03/1.128/3.0.34
			Options: search present delSet triggerResourceCtrl scan sort namedResultSets
			Elapsed: 0.010718
			Z&gt; format marcxml
			Z&gt; find <quote>dc.title=zone and dc.author=king</quote>
			Sent searchRequest.
			Received SearchResponse.
			Search was a success.
			Number of hits: 0, setno 4
			records returned: 0
			Elapsed: 0.611432
			Z&gt; find <quote>dead zone</quote>
			Sent searchRequest.
			Received SearchResponse.
			Search was a success.
			Number of hits: 4, setno 5
			records returned: 0
			Elapsed: 1.555461
			Z&gt; show 1
			Sent presentRequest (1+1).
			Records: 1
			[]Record type: XML
			&lt;record xmlns:... (rest of record deliberately truncated)
			</screen>
	</section>
</chapter>

