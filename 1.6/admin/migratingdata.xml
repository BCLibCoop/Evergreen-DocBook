<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	    xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="migratingdata" >
	<info>		
	<title>Migrating Data</title>
		<abstract>
			<para>Migrating data into Evergreen can be one of the most daunting tasks for an administrator. This chapter will explain some procedures to help to migrate 
			bibliographic records, copies and patrons into the Evergreen system. This chapter requires advanced ILS Administration experience, knowledge of Evergreen data structures, 
			as well as knowledge of how to export data from your current system or access to data export files from your current system.</para>
        	</abstract>
	</info>    
	<section xml:id="migratingpatrons">
		<title>Migrating Patron Data</title>
		<para>
		This section will explain the task of migrating your patron data from Comma Delimited Files into Evergreen. It does not deal with the process of exporting from the non-Evergreen 
		system since this process may vary depending on where you are extracting your patron records. Patron could come from an ILS or it could come from a student database in the case of 
		academic records.  		
		</para>
		<para>When importing records into Evergreen you will need to populate 3 tables in your Evergreen database:</para>
		<itemizedlist>
			<listitem><link linkend="actor.table.usr">actor.usr</link> - This is the main table for user data</listitem>
			<listitem><link linkend="actor.table.card">actor.card</link> - Stores the barcode for users. Users can have more than 1 card but only 1 can be active at a given time.</listitem>
			<listitem><link linkend="actor.table.usr_address">actor.usr_address</link> - Used for storing address information. A user can have more than one address.</listitem>
		</itemizedlist>
		<para>Before following the procedures below to import patron data into Evergreen, it is a good idea to examine the fields in these tables in order to decide on a strategy 
		for data to include 
		in your import. It is important to understand the data types and constraints of the fields.</para>
		<procedure>
			<step>
				<para>Export the patron data from your existing ILS or from another source into a Comma Delimited File. The Comma Delimited File used for importing the records should 
				use Unicode (UTF8) character encoding.</para>
			</step>
			<step>
				<para>Create a staging table. A staging table will allow you to tweak the data before importing. Here is an example sql statement:</para>
<programlisting language="sql">
CREATE TABLE students (
	student_id int, barcode text, last_name text, first_name text, program_number text, program_name text, email text, address_type text, street1 text, street2 text, city text, province text, 
	country text, postal_code text, phone text, profile int, ident_type int, home_ou int, claims_returned_count int DEFAULT 0, usrname text, net_access_level int DEFAULT 2, password text
); 
</programlisting>
				<para>Note the <varname>DEFAULT</varname> variables. These allow you to set default for your library or to populate required fields if you data allows NULL values where 
				fields are required in Evergreen.</para>
			</step>
			<step>
				<para>Formatting of some fields to fit Evergreen filed formatting may be required. Here is an example of sql to adjust phone numbers in the staging 
				table top fit the evergreen field:</para>
<programlisting language="sql">
UPDATE students phone = replace(replace(replace(rpad(substring(phone from 1 for 9), 10, '-') || substring(phone from 10), '(', ''), ')', ''), ' ', '-');
</programlisting>
				<para>Data <quote>massaging</quote> may be required to fit formats used in Evergreen.</para>
			</step>
			<step>
				<para>Insert records from the staging table into the <link linkend="actor.table.usr">actor.usr</link> Evergreen table:</para>
<programlisting language="sql">
 INSERT INTO actor.usr (
	profile, usrname, email, passwd, ident_type, ident_value, first_given_name, family_name, day_phone, home_ou, claims_returned_count, net_access_level) SELECT profile, students.usrname, 
	email, student_id, ident_type, student_id, first_name, last_name, phone, home_ou, claims_returned_count, net_access_level FROM students;
</programlisting>			
			</step>
			<step>
				<para>insert records into <link linkend="actor.table.card">actor.card</link> from <link linkend="actor.table.usr">actor.usr</link>.</para>
<programlisting language="sql">
INSERT INTO actor.card (usr, barcode) 
	SELECT actor.usr.id, students.barcode 
	FROM students 
		INNER JOIN actor.usr 
			ON students.usrname = actor.usr.usrname;
</programlisting>		
				<para>This assumes a one to one card patron relationship. If your patron data import has multiple cards assigned to one patron more complex import scripts may be required 					which look for inactive or active flags.</para>	
			</step>
			<step>
				<para>Update actor.usr.card field with actor.card.id to associate active card with the user:</para>
<programlisting language="sql">
UPDATE actor.usr 
	SET card = actor.card.id 
	FROM actor.card 
	WHERE actor.card.usr = actor.usr.id;
</programlisting>			
			</step>
			<step>
				<para>Insert records into actor.usr_address to add address information for users:</para>
<programlisting language="sql">
INSERT INTO actor.usr_address (usr, street1, street2, city, state, country, post_code) 
	SELECT actor.usr.id, students.street1, students.street2, students.city, students.province, students.country, students.postal_code 
	FROM students 
	INNER JOIN actor.usr ON students.usrname = actor.usr.usrname;
</programlisting>			
			</step>
			<step>
				<para>update actor.usr.address with address id from address table.</para>
<programlisting language="sql">
UPDATE actor.usr 
	SET mailing_address = actor.usr_address.id, billing_address = actor.usr_address.id 
	FROM actor.usr_address 
	WHERE actor.usr.id = actor.usr_address.usr;
</programlisting>	
			<para>This assumes 1 address per student. More complex scenarios may require more sophisticated SQL.</para>		
			</step>
		</procedure>
		<simplesect>
			<title>Creating an sql Script for Importing Patrons</title>
			<para>The procedure for importing patron can be automated with the help of an sql script. Follow these steps to create an import script:</para>
		
			<procedure>
				<step>
					<para>Create an new file and name it <filename>import.sql</filename></para>

				</step>

				<step>
					<para>Edit the file to look similar to this:</para>
<programlisting>
BEGIN;

-- Create staging table.
CREATE TABLE students (
	student_id int, barcode text, last_name text, first_name text, program_number text, program_name text, email text, address_type text, street1 text, street2 text, city text, province text, 
	country text, postal_code text, phone text, profile int, ident_type int, home_ou int, claims_returned_count int DEFAULT 0, usrname text, net_access_level int DEFAULT 2, password text
); 


--Insert records from the staging table into the actor.usr table.
INSERT INTO actor.usr (
	profile, usrname, email, passwd, ident_type, ident_value, first_given_name, family_name, day_phone, home_ou, claims_returned_count, net_access_level) SELECT profile, students.usrname, 
	email, student_id, ident_type, student_id, first_name, last_name, phone, home_ou, claims_returned_count, net_access_level FROM students;

--Insert records from the staging table into the actor.usr table.
INSERT INTO actor.card (usr, barcode) 
	SELECT actor.usr.id, students.barcode 
	FROM students 
		INNER JOIN actor.usr 
			ON students.usrname = actor.usr.usrname;

--Update actor.usr.card field with actor.card.id to associate active card with the user:
UPDATE actor.usr 
	SET card = actor.card.id 
	FROM actor.card 
	WHERE actor.card.usr = actor.usr.id;

--INSERT records INTO actor.usr_address from staging table.
INSERT INTO actor.usr_address (usr, street1, street2, city, state, country, post_code) 
	SELECT actor.usr.id, students.street1, students.street2, students.city, students.province, students.country, students.postal_code 
	FROM students 
	INNER JOIN actor.usr ON students.usrname = actor.usr.usrname;


--Update actor.usr mailing address with id from actor.usr_address table.:
UPDATE actor.usr 
	SET mailing_address = actor.usr_address.id, billing_address = actor.usr_address.id 
	FROM actor.usr_address 
	WHERE actor.usr.id = actor.usr_address.usr;

COMMIT;
</programlisting>
					<para>Placing the sql statements between <code>BEGIN;</code> and <code>COMMIT;</code> creates a transaction block so that if any statements fail, the 
					entire process is canceled and the database is rolled back to its original state. Lines beginning with <emphasis>--</emphasis> are comments to let you you what 
					each sql statement is doing and are not processed.</para> 
				</step>
			</procedure>
		</simplesect>
		<simplesect>
			<title>Batch Updating Patron Data</title>
			<para>For academic libraries, doing batch updates to add new patrons to the Evergreen database is a critical task. The above procedures and 
			import script can be easily adapted to create an update script for importing new patrons from external databases. If the data import file contains only new patrons, then, 
			the above procedures will work well to insert those patrons. However, if the data load contains all patrons, a second staging table and a procedure to remove existing 				patrons from that second staging table may be required before importing the new patrons. Moreover, additional steps to update address information and perhaps delete 
			inactive patrons may also be desired depending on the requirements of the institution.</para>
			<para>After developing the scripts to import and update patrons have been created, another important task of library staff is to develop an strategy and schedule 
			which suits the needs of the library. This could be determined by registration dates of your institution in the case of academic libraries. It is important to balance 
			the convenience of patron loads and the cost of processing these loads vs staff adding patrons as needed.</para>   
	       </simplesect> 
	</section>
</chapter>
