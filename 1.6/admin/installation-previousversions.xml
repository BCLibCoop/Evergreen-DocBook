<?xml version='1.0' encoding='UTF-8'?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:id="installation-previousversions">

			<title>Installing Previous Versions of Evergreen</title>
			<para>Earlier releases of Evergreen are available. Instructions for installing, configuring and testing earlier versions are found below.</para>
			<para>The next most recent previous release of Evergreen is version <emphasis><emphasis role="bold">1.4.0.6</emphasis></emphasis>. The accompanying previous release of OpenSRF 
			is version <emphasis><emphasis role="bold">1.0.7</emphasis></emphasis>.</para>
			<section xml:id="serversideinstallation-evergreen-previous">
				<title>Installing Evergreen 1.4.0.6 On <systemitem class="osname">Ubuntu</systemitem> or <systemitem class="osname">Debian</systemitem></title>
				<para>This section outlines the installation process for the previous version 1.4.0.6 of Evergreen.</para>
				<para>In this section you will download, unpack, install, configure and test the Evergreen system, including the Evergreen server and the PostgreSQL database system. You will make several configuration changes and adjustments to the software, including updates to configure the system for your own locale, and some updates needed to work around a few known issues.</para>
				<note>
					<para>The following steps have been tested on the x86 (32-bit) and x86-64 (64-bit) architectures. There may be differences between the Desktop and Server editions of <systemitem class="osname">Ubuntu</systemitem>. These instructions assume the Server edition.</para>
					<para>If you are starting with a clean install of <systemitem class="osname">Ubuntu</systemitem> or <systemitem class="osname">Debian</systemitem>, you are strongly recommended <emphasis role="bold">not</emphasis> to install the packaged PostgreSQL server. This can confuse port numbers and system configuration. Evergreen 1.4 requires PostgreSQL 8.2.</para>
				</note>
				<section>
					<title>Installing OpenSRF 1.0.7</title>
					<para>Evergreen software is integrated with and depends on the Open Service Request Framework (OpenSRF) software system. For further information on installing, configuring and testing OpenSRF, see <xref linkend="serversideinstallation-opensrf-previous"/>.</para>
					<para>Follow the steps outlined in that section and run the specified tests to ensure that OpenSRF is properly installed and configured. Do not continue with any further Evergreen installation steps until you have verified that OpenSRF has been successfully installed.</para>
				</section>
				<section>
					<title>Download and Unpack Evergreen Version 1.4.0.6</title>
					<para>As the <systemitem class="username">opensrf</systemitem> user, download and extract the latest version of Evergreen. The latest version can be found here: <ulink url="http://evergreen-ils.org/downloads/Evergreen-ILS-1.4.0.6.tar.gz"></ulink></para>
					<figure>
						<title>Commands to download and unpack Evergreen</title>
						<screen>
						$ su - opensrf
						$ wget http://evergreen-ils.org/downloads/Evergreen-ILS-1.4.0.6.tar.gz
						$ tar zxf Evergreen-ILS-1.4.0.6.tar.gz
						</screen>
					</figure>
					<para>The new directory <filename class="directory">/home/opensrf/Evergreen-ILS-1.4.0.6</filename> will be created.</para>
				</section>
				<section>
					<title>Install Prerequisites to Build Evergreen</title>
					<para>In this section you will install and configure a set of prerequisites that will be used to build Evergreen. In a following step you will actually build the software using the <command>make</command> utility.</para>
					<para>As the <systemitem class="username">root</systemitem> user, enter the commands show below to build the prerequisites from the software distribution that you just downloaded and unpacked. Remember to replace <emphasis>[distribution]</emphasis> in the example with the keyword corresponding to the actual <systemitem class="osname">Linux</systemitem> distribution listed in the <link linkend="serversideinstallation-keywords-figure-2-a">"Keywords"</link> figure below.</para>
					<figure>
						<title>Commands to install prerequisites for Evergreen</title>
						<screen>
						$ su - root
						$ cd /home/opensrf/Evergreen-ILS-1.4.0.6
						$ make -f Open-ILS/src/extras/Makefile.install [distribution]
						...
						</screen>
					</figure>
					<table xml:id="serversideinstallation-keywords-figure-2-a">
						<title>Keywords Targets for <application>"make"</application> Command</title>
						<tgroup align="left" cols="2" colsep="1" rowsep="1">
							<colspec colnum="1" colwidth="1.0*"/>
							<colspec colnum="2" colwidth="3.0*"/>
							<thead>
								<row>
									<entry>Keyword</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>debian-lenny</entry>
									<entry>for Debian Lenny (5.0)</entry>
								</row>
								<row>
									<entry>debian-etch</entry>
									<entry>for Debian Etch (4.0)</entry>
								</row>
								<row>
									<entry>ubuntu-intrepid</entry>
									<entry>for Ubuntu Intrepid (8.10)</entry>
								</row>
								<row>
									<entry>ubuntu-hardy</entry>
									<entry>for Ubuntu Hardy (8.04)</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</section>
				<section>
					<title>Update the System Dynamic Library Path</title>
					<para>As the <systemitem class="username">root</systemitem> user, you must update the system dynamic library path to make your system recognize the newly installed libraries. Do this by creating the new file <filename>/etc/ld.so.conf.d/eg.conf</filename> containing two new library paths, then run the command <command>ldconfig</command> to automatically read the file and modify the system dynamic library path:</para>
					<figure>
						<title>Commands to modify system dynamic library path</title>
						<screen>
						$ su - root
						$ cat > /etc/ld.so.conf.d/eg.conf &lt;&lt; ENDOFFILE
						/usr/local/lib
						/usr/local/lib/dbd
						ENDOFFILE
						$ ldconfig
						</screen>
					</figure>
				</section>
				<section>
					<title>Restart the PostgreSQL Server</title>
					<para>If PostgreSQL is running on the same system as the rest of Evergreen, as the <systemitem class="username">root</systemitem> user you must restart the PostgreSQL server to avoid a problem where the library <filename>plperl.so</filename> cannot be found. If your PostgreSQL server is running on another system, just skip this step.</para>
					<figure>
						<title>Commands to restart PostgreSQL server</title>
						<screen>
						$ su - root
						$ /etc/init.d/postgresql-8.2 restart
						</screen>
					</figure>
				</section>
				<section>
					<title>Configure Evergreen</title>
					<para>As the <systemitem class="username">opensrf</systemitem> user, return to the Evergreen build directory and use the <command>configure</command> utility to prepare for the next step of compiling and linking the software:</para>
					<figure>
						<title>Commands to configure Evergreen</title>
						<screen>
						$ su - opensrf
						$ cd /home/opensrf/Evergreen-ILS-1.4.0.6
						$ ./configure --prefix=/openils --sysconfdir=/openils/conf
						$ make
						...
						</screen>
					</figure>
				</section>
				<section>
					<title>Compile, Link and Install Evergreen</title>
					<para>In this step you will actually compile, link and install Evergreen and the default Evergreen Staff Client.</para>
					<para>As the <systemitem class="username">root</systemitem> user, return to the Evergreen build directory and use the <command>make</command> utility as shown below. The Staff Client will also be automatically built, but you must remember to set the variable <envar>STAFF_CLIENT_BUILD_ID</envar> to match the version of the Staff Client you will use to connect to the Evergreen server.</para>
					<para>For further information on manually building the Staff Client, see <xref linkend="serversideinstallation-building-staffclient"/>.</para>
					<figure>
						<title>Commands to build, link and install Evergreen</title>
						<screen>
						$ su - root
						$ cd /home/opensrf/Evergreen-ILS-1.4.0.6
						$ make STAFF_CLIENT_BUILD_ID=rel_1_4_0_6 install
						...
						</screen>
						<para>The above commands will create a new subdirectory <filename class="directory">/openils/var/web/xul/rel_1_4_0_6</filename> containing the Staff Client.</para>
					</figure>
				</section>
				<section>
					<title>Copy the OpenSRF Configuration Files</title>
					<para>As the <systemitem class="username">root</systemitem> user, copy the example OpenSRF configuration files into place. This replaces the configuration files that you set up in a previous step when you installed and tested OpenSRF. You should also create backup copies of the old files for troubleshooting purposes. Finally, change the ownership on the installed files to the <systemitem class="username">opensrf</systemitem> user:</para>
					<figure>
						<title>Commands to copy OpenSRF configuration files</title>
						<screen>
						$ su - root
						$ cp /openils/conf/opensrf.xml.example      /openils/conf/opensrf.xml
						$ cp /openils/conf/opensrf_core.xml.example /openils/conf/opensrf_core.xml
						$ chown -R opensrf:opensrf /openils/
						</screen>
					</figure>
				</section>
				<section>
					<title>Create and Configure PostgreSQL Database</title>
					<para>As the <systemitem class="username">postgres</systemitem> user on your PostgreSQL server, create the Evergreen database.</para>
					<para>In the commands below, remember to adjust the path of the <emphasis role="bold">contrib</emphasis> repository to match your PostgreSQL server layout. For example, if you built PostgreSQL from source the path would be <filename class="directory">/usr/local/share/contrib</filename>; if you installed the PostgreSQL 8.2 server packages on <systemitem class="osname">Ubuntu 8.04</systemitem>, the path would be <filename class="directory">/usr/share/postgresql/8.2/contrib/</filename>.</para>
					<procedure>
						<step>
							<para>
								<emphasis role="bold">Create and configure the database</emphasis>
							</para>
							<para>As the <systemitem class="username">postgres</systemitem> user on the PostgreSQL system create the PostgreSQL database, then set some internal paths:</para>
							<figure>
								<title>Commands to create database and adjust the path</title>
								<screen>
								# create the database
								$ su - postgres
								$ createdb -E UNICODE evergreen
								$ createlang plperl   evergreen
								$ createlang plperlu  evergreen
								$ createlang plpgsql  evergreen
			
								# adjust the paths
								$ psql -f /usr/share/postgresql/PGSQL_VERSION/contrib/tablefunc.sql evergreen
								$ psql -f /usr/share/postgresql/PGSQL_VERSION/contrib/tsearch2.sql  evergreen
								$ psql -f /usr/share/postgresql/PGSQL_VERSION/contrib/pgxml.sql     evergreen
								</screen>
							</figure>
							<emphasis>Where <literal>PGSQL_VERSION</literal> is your installed PostgreSQL version (e.g. <literal>8.2</literal>).</emphasis>
						</step>
						<step>
							<para>
								<emphasis role="bold">Create new Evergreen superuser</emphasis>
							</para>
							<para>As the <systemitem class="username">postgres</systemitem> user on the PostgreSQL system, create the 
							new database <systemitem class="username">evergreen</systemitem> user and assign a password:</para>
<screen>
# create superuser 'evergreen' and set the password
<userinput>su - postgres</userinput>
<userinput>createuser -P -s evergreen</userinput>
<prompt>Enter password for new role:</prompt> <userinput>MYNEWPASSWORD</userinput>
<prompt>Enter it again:</prompt><userinput>MYNEWPASSWORD</userinput>
</screen>
							<emphasis>Where <literal>MYNEWPASSWORD</literal> is the password chosen.</emphasis>
						</step>
					</procedure>
				</section>
				<section>
					<title>Create Database Schema</title>
					<para>As the <systemitem class="username">root</systemitem> user, create the database schema and configure your system with the corresponding database authentication details for the <emphasis>evergreen</emphasis> database user that you created in the previous step.</para>
					<para>Enter the following commands and replace <emphasis>HOSTNAME, PORT, PASSWORD</emphasis> and <emphasis>DATABASENAME</emphasis> with appropriate values.</para>
					<figure>
						<title>Commands to create Evergreen database schema</title>
						<screen>
						$ su - root
						$ cd /home/opensrf/Evergreen-ILS-1.4.0.6
						$ perl Open-ILS/src/support-scripts/eg_db_config.pl --update-config \
							--service all --create-schema --create-bootstrap --create-offline \
							--hostname HOSTNAME --port PORT \
							--user evergreen --password PASSWORD --database DATABASENAME
						</screen>
					</figure>
					<emphasis>Where, on most systems, <emphasis>HOSTNAME</emphasis> will be <emphasis role="bold">localhost</emphasis>, <emphasis>PORT</emphasis> will be <emphasis role="bold">5432</emphasis>, and <emphasis>PASSWORD</emphasis> and <emphasis>DATABASENAME</emphasis> will be those assigned when PostgreSQL was installed in the previous step.</emphasis>
					<note>
						<para>
							<emphasis>If you are entering the above command on a single line, do not include the <literal>\</literal> (backslash) characters. If you are using the <command>bash</command> shell, these should only be used at the end of a line at a bash prompt to indicate that the command is continued on the next line.</emphasis>
						</para>
					</note>
				</section>
				<section>
					<title>Evergreen installation - (continued)</title>
					<para><emphasis>The remainder of the Evergreen installation procedure is identical to that for installing the latest version of Evergreen. Continue with the instructions found in</emphasis> <xref linkend="serversideinstallation-modify-apache"/>.</para>
				</section>
			</section>
			<section xml:id="serversideinstallation-opensrf-previous">
				<title>Installing OpenSRF 1.0.7 On <systemitem class="osname">Ubuntu</systemitem> or <systemitem class="osname">Debian</systemitem></title>
				<para>This section describes the installation of the previous version of the Open Service Request Framework (OpenSRF), a major component of the Evergreen server-side software, on <systemitem class="osname">Ubuntu</systemitem> or <systemitem class="osname">Debian</systemitem> systems. Evergreen software is integrated with and depends on the OpenSRF software system.</para>
				<para>Follow the steps outlined here and run the specified tests to ensure that OpenSRF is properly installed and configured. Do not continue with any further Evergreen installation steps until you have verified that OpenSRF has been successfully installed.</para>
				<note>
					<para>The following steps have been tested on the x86 (32-bit) and x86-64 (64-bit) platforms. OpenSRF 1.0.7 has been tested on <systemitem class="osname">Debian Etch (4.0)</systemitem>, <systemitem class="osname">Debian Lenny</systemitem>, <systemitem class="osname">Ubuntu Hardy Heron (8.04)</systemitem>, and <systemitem class="osname">Ubuntu Intrepid Ibex (8.10)</systemitem>.</para>
					<para>In the following instructions, you are asked to perform certain steps as either the <systemitem class="username">root</systemitem> user, the <systemitem class="username">opensrf</systemitem> user, or the <systemitem class="username">postgres</systemitem> user.</para>
					<itemizedlist>
						<listitem><systemitem class="osname">Debian</systemitem> -- To become the <systemitem class="username">root</systemitem> user, issue the command <command>su -</command> and enter the password of the <systemitem class="username">root</systemitem> user.</listitem>
						<listitem><systemitem class="osname">Ubuntu</systemitem> -- To become the <systemitem class="username">root</systemitem> user, issue the command <command>sudo su -</command> and enter the password of the <systemitem class="username">root</systemitem> user.</listitem>
					</itemizedlist>
					<para>To switch from the <systemitem class="username">root</systemitem> user to a different user, issue the command <command>su - USERNAME</command>. For example, to switch from the <systemitem class="username">root</systemitem> user to the <systemitem class="username">opensrf</systemitem> user, issue the command <command>su - opensrf</command>. Once you have become a non-root user, to become the <systemitem class="username">root</systemitem> user again, simply issue the command <command>exit"</command>.</para>
				</note>
				<section>
					<title>Add the OpenSRF User</title>
					<para>As the <systemitem class="username">root</systemitem> user, add the opensrf user to the system. The default shell for the new user is automatically set to <command>/bin/bash</command> to inherit a reasonable environment:</para>
					<figure>
						<title>Commands to add <systemitem class="username">opensrf</systemitem> user</title>
						<screen>
					$ su - opensrf
					$ useradd -m -s /bin/bash opensrf
					$ passwd opensrf
					Enter new UNIX password: ******
					Retype new UNIX password: ******
					passwd: password updated successfully
					$
					</screen>
					</figure>
				</section>
				<section>
					<title>Download and Unpack Latest OpenSRF Version</title>
					<para>As the <systemitem class="username">opensrf</systemitem> user, download and extract the latest version of OpenSRF. The latest version can be found here: <ulink url="http://evergreen-ils.org/downloads/OpenSRF-1.0.7.tar.gz"></ulink></para>
					<figure>
						<title>Commands to download and unpack OpenSRF</title>
						<screen>
					$ su - opensrf
					$ wget http://evergreen-ils.org/downloads/OpenSRF-1.0.7.tar.gz
					$ tar zxf OpenSRF-1.0.7.tar.gz
					</screen>
					</figure>
					<para>The new directory <filename class="directory">/home/opensrf/OpenSRF-1.0.7</filename> will be created.</para>
				</section>
				<section>
					<title>Install Prerequisites to Build OpenSRF</title>
					<para>In this section you will install and configure a set of prerequisites that will be used to build OpenSRF. In a following step you will actually build the software using the <command>make</command> utility.</para>
					<para>As the <systemitem class="username">root</systemitem> user, enter the commands show below to build the prerequisites from the software distribution that you just downloaded and unpacked. Remember to replace <emphasis>[DISTRIBUTION]</emphasis> in the example with the keyword corresponding to the actual <systemitem class="osname">Linux</systemitem> distribution listed in the <link linkend="serversideinstallation-keywords-figure-1a">"Keywords"</link> figure below.</para>
					<figure>
						<title>Commands to install prerequisites for OpenSRF</title>
						<screen>
					$ su - root
					$ cd /home/opensrf/OpenSRF-1.0.7
					$ make -f src/extras/Makefile.install [DISTRIBUTION]
					...
					</screen>
					</figure>
					<table xml:id="serversideinstallation-keywords-figure-1a">
						<title>Keywords Targets for <application>"make"</application> Command</title>
						<tgroup align="left" cols="2" colsep="1" rowsep="1">
							<colspec colnum="1" colwidth="1.0*"/>
							<colspec colnum="2" colwidth="3.0*"/>
							<thead>
								<row>
									<entry>Keyword</entry>
									<entry>Description</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>debian-lenny</entry>
									<entry>for Debian Lenny (5.0)</entry>
								</row>
								<row>
									<entry>debian-etch</entry>
									<entry>for Debian Etch (4.0)</entry>
								</row>
								<row>
									<entry>ubuntu-intrepid</entry>
									<entry>for Intrepid (8.10)</entry>
								</row>
								<row>
									<entry>ubuntu-hardy</entry>
									<entry>for Ubuntu Hardy (8.04)</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<para>This will install a number of packages on the system that are required by OpenSRF, including some Perl modules from CPAN. You can say <literal>No</literal> to the initial CPAN configuration prompt to allow it to automatically configure itself to download and install Perl modules from CPAN. The CPAN installer will ask you a number of times whether it should install prerequisite modules - say <literal>Yes</literal>.</para>
				</section>
				<section>
					<title>Configure OpenSRF</title>
					<para>As the <systemitem class="username">opensrf</systemitem> user, return to the OpenSRF build directory and use the <command>configure</command> utility to prepare for the next step of compiling and linking the software. You can include the  <option>--enable-python</option> and <option>--enable-java</option> configuration options if you wish to include support for Python and Java, respectively:</para>
					<figure>
						<title>Commands to configure OpenSRF</title>
						<screen>
					$ su - opensrf
					$ cd /home/opensrf/OpenSRF-1.0.7
					$ ./configure --prefix=/openils --sysconfdir=/openils/conf
					$ make
					...
					</screen>
					</figure>
				</section>
				<section>
					<title>Compile, Link and Install OpenSRF</title>
					<para>As the <systemitem class="username">root</systemitem> user, return to the OpenSRF build directory and use the <command>make</command> utility to compile, link and install OpenSRF:</para>
					<figure>
						<title>Commands to build, link and install OpenSRF</title>
						<screen>
					$ su - opensrf
					$ cd /home/opensrf/OpenSRF-1.0.7
					$ make install
					...
					</screen>
					</figure>
				</section>
				<section>
					<title>Update the System Dynamic Library Path</title>
					<para>As the <systemitem class="username">root</systemitem> user, you must update the system dynamic library path to make your system recognize the newly installed libraries. Do this by creating the new file <filename>/etc/ld.so.conf.d/osrf.conf</filename> containing a new library path, then run the command <command>ldconfig</command> to automatically read the file and modify the system dynamic library path:</para>
					<figure>
						<title>Commands to modify system dynamic library path</title>
						<screen>
					$ su - root
					$ echo "/openils/lib" > /etc/ld.so.conf.d/osrf.conf
					$ ldconfig
					</screen>
					</figure>
				</section>
				<section>
					<title>Define Public and Private OpenSRF Domains</title>
					<para>Define your public and private OpenSRF domains. For security purposes, OpenSRF uses Jabber domains to separate services into public and private realms. Throughout these instructions, we will use the example domains <systemitem class="domainname">public.localhost</systemitem> for the public domain and <systemitem class="domainname">private.localhost</systemitem> for the private domain. On a single-server system, the easiest way to define public and private domains is to define separate host names by adding entries to the file <filename>/etc/hosts</filename>.</para>
					<para>As the <systemitem class="username">root</systemitem> user, edit the file <filename>/etc/hosts</filename> and add the following entries for our example domains:</para>
					<figure>
						<title>Example public and private domains in /etc/hosts</title>
						<screen>
					127.0.1.2	public.localhost	public
					127.0.1.3	private.localhost	private
					</screen>
					</figure>
				</section>
				<section>
					<title>Change File Ownerships</title>
					<para>As the <systemitem class="username">root</systemitem> user, change the ownership of files installed in the directory <filename class="directory">/openils</filename> to the <systemitem class="username">opensrf</systemitem> user:</para>
					<figure>
						<title>Commands to change file ownerships</title>
						<screen>
					$ chown -R opensrf:opensrf /openils
					</screen>
					</figure>
				</section>
				<section>
					<title>Stop the <systemitem class="service">ejabberd</systemitem> Service</title>
					<para>As the <systemitem class="username">root</systemitem> user, stop the <systemitem class="service">ejabberd</systemitem> service:</para>
					<figure>
						<title>Commands to stop the <systemitem class="service">ejabberd</systemitem> service</title>
						<screen>
					$ /etc/init.d/ejabberd stop
					</screen>
					</figure>
					<para>If <systemitem class="service">ejabberd</systemitem> reports that it is already stopped, it may have run into a problem starting back at the installation stage. One possible fix is to kill any remaining <systemitem class="daemon">beam</systemitem> and <systemitem class="daemon">epmd</systemitem> processes, then edit the configuration file <filename>/etc/ejabberd/ejabberd.cfg</filename> to hardcode a domain:</para>
					<figure>
						<title>Commands to recover from <systemitem class="service">ejabberd</systemitem> errors</title>
						<screen>
					$ su - root
					$ epmd -kill
					$ killall beam; killall beam.smp
					$ rm /var/lib/ejabberd/*
					$ echo 'ERLANG_NODE=ejabberd@localhost' >> /etc/default/ejabberd
					</screen>
					</figure>
				</section>
				<section>
					<title>Edit the <systemitem class="service">ejabberd</systemitem> configuration</title>
					<para>As the <systemitem class="username">root</systemitem> user, edit the file <filename>/etc/ejabberd/ejabberd.cfg</filename> and make the following changes:</para>
					<itemizedlist>
						<listitem>Change <literal>{hosts, ["localhost"]}.</literal> to <literal>{hosts, ["localhost", "private.localhost", "public.localhost"]}.</literal></listitem>
						<listitem>Change <literal>{max_user_sessions, 10}.</literal> to <literal>{max_user_sessions, 1000}.</literal> If you see something like this instead: <literal>{access, max_user_sessions, [{10, all}]}.</literal>, then change it to <literal>{access, max_user_sessions, [{1000, all}]}.</literal></listitem>
						<listitem>Change all three occurrences of <literal>max_stanza_size</literal> to <literal>2000000</literal>.</listitem>
						<listitem>Change both occurrences of <literal>maxrate</literal> to <literal>500000</literal>.</listitem>
						<listitem>Comment out the line <literal>{mod_offline, []}</literal> by placing two <literal>%</literal> comment signs in front.</listitem>
					</itemizedlist>
				</section>
				<section>
					<title>OpenSRF installation - (continued)</title>
					<para>
						<emphasis>The remainder of the OpenSRF installation procedure is identical to that for installing the latest version of OpenSRF. Continue with the instructions found in <xref linkend="serversideinstallation-opensrf-continued"/>.</emphasis>
					</para>
				</section>
			</section>
		</section>
		<section xml:id="serversideinstallation-postgresql">
			<title>Installing PostgreSQL</title>
			<para>In production Evergreen systems, the PostgreSQL database server may reside on the same system on which Evergreen is installed or on another standalone system so, by default, PostgreSQL is not automatically installed along with Evergreen. This section details the steps needed to manually install PostgreSQL on a <systemitem class="osname">Ubuntu</systemitem> or <systemitem class="osname">Debian</systemitem> system.</para>
			<para>If your PostgreSQL server will be on the same system as your Evergreen software, return to the previous section <xref linkend="serversideinstallation-postgresql-default"/> and follow those instructions. Otherwise, to manually install PostgreSQL on a system, continue with the instructions below.</para>
			<note>
				<para>Some <systemitem class="osname">Linux</systemitem> distributions, such as <systemitem class="osname">Debian Etch (4.0)</systemitem>, do not offer PostgreSQL version 8.2 as an installable package. Before you continue, examine the software dependencies listed in <xref linkend="serversideinstall-software-dependencies"/> to ensure that your Linux distribution supports the required version of PostgreSQL.</para>
			</note>
			<procedure>
				<step>
					<para>Install the application <application>"stow"</application> on your system if it is not already installed. Issue the following command as the <systemitem class="username">root</systemitem> user:</para>
					<figure>
						<title>Installing <application>"stow"</application></title>
						<screen>
						$ apt-get install stow
						...
						</screen>
					</figure>
				</step>
				<step>
					<para>Download, compile, and install the latest release for PostgreSQL 8.2 (which was version <literal>8.2.12</literal> at the time of this writing). As the <systemitem class="username">root</systemitem> user, follow these steps:</para>
					<figure>
						<title>Installing PostgreSQL</title>
						<screen>
						$ wget http://wwwmaster.postgresql.org/redir/198/h/source/v8.2.17/postgresql-8.2.17.tar.bz2
						$ tar xzf postgresql-8.2.17.tar.gz
						$ cd postgresql-8.2.17
						$ ./configure --with-perl --enable-integer-datetimes --with-openssl --prefix=/usr/local/stow/pgsql
						...
						$ make
						...
						$ make install
						...
						$ cd contrib
						$ make
						...
						$ make install
						$ cd xml2
						$ make
						...
						$ make install
						$ cd /usr/local/stow
						$ stow pgsql
						</screen>
					</figure>
				</step>
				<step>
					<para>Create the new user <systemitem class="username">postgres</systemitem> to run the PostgreSQL processes. As the <systemitem class="username">root</systemitem> user, execute this command:</para>
					<figure>
						<title>Adding <systemitem class="username">postgres</systemitem></title>
						<screen>
						$ adduser postgres
						</screen>
					</figure>
				</step>
				<step>
					<para>Initialize the database directory and start up PostgreSQL. As the <systemitem class="username">root</systemitem> user, follow these steps:</para>
					<figure>
						<title>Adding <systemitem class="username">postgres</systemitem></title>
						<screen>
						$ mkdir -p /usr/local/pgsql/data
						$ chown postgres /usr/local/pgsql/data
						$ su - postgres
						$ initdb -D /usr/local/pgsql/data -E UNICODE --locale=C
						$ pg_ctl -D /usr/local/pgsql/data -l /home/postgres/logfile start
						</screen>
					</figure>
					<note>
						<para>If an error occurs during the final step above, review the path of the home directory for the <systemitem class="username">postgres</systemitem> user. It may be <literal>/var/lib/postresql</literal> instead of <literal>/home/postres</literal>.</para>
					</note>
				</step>
				<step>
					<para>The values of several PostreSQL configuration parameters may be changed for enhanced performance. The following table lists the default values and some suggested updates for several useful parameters:</para>
					<table>
						<title>Suggested configuration values</title>
						<tgroup align="left" cols="3" colsep="1" rowsep="1">
							<colspec colnum="1" colwidth="1.0*"/>
							<colspec colnum="2" colwidth="1.0*"/>
							<colspec colnum="3" colwidth="1.0*"/>
							<thead>
								<row>
									<entry>Parameter</entry>
									<entry>Default</entry>
									<entry>Suggested</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry>default_statistics_target</entry>
									<entry>10</entry>
									<entry>100</entry>
								</row>
								<row>
									<entry>work_mem</entry>
									<entry>4Mb</entry>
									<entry>128Mb</entry>
								</row>
								<row>
									<entry>shared_buffers</entry>
									<entry>8Mb</entry>
									<entry>512Mb</entry>
								</row>
								<row>
									<entry>effective_cache_size</entry>
									<entry>128Mb</entry>
									<entry>4Gb</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
					<indexterm>
						<primary>ZZZ-REVIEW</primary>
						<secondary>ADD CONTENT ON HOW TO UPDATE POSTRESQL PARAMETERS</secondary>
					</indexterm>
					<caution>ADD CONTENT ON HOW TO UPDATE POSTRESQL PARAMETERS </caution>
				</step>
			</procedure>
		</section>
		<section xml:id="serversideinstallation-apache">
			<title>Installing Apache</title>
			<section>
				<title>Securing Apache (httpd)</title>
				<para>The main consideration is to secure the directory <filename class="directory">cgi-bin</filename>. The only persons that need access to this directory are Evergreen system administrators. This directory should be restricted by both IP (to those workstations designated as Evergeen Administration systems), and by username/password.</para>
				<indexterm>
					<primary>ZZZ-REVIEW</primary>
					<secondary>ADD CONTENT ON HOW TO RESTRICT APACHE BY IP AND USERNAME/PASSWORD </secondary>
				</indexterm>
				<caution>ADD CONTENT ON HOW TO RESTRICT APACHE BY IP AND USERNAME/PASSWORD </caution>
				<para>A user could add new libraries, re-arrange consortia, or change user groups; or a staff member could access the directory, and change his associated security group to administrative level privileges.</para>
			</section>
			<indexterm>
				<primary>ZZZ-REVIEW</primary>
				<secondary>ADD MORE CONTENT FOR APACHE </secondary>
			</indexterm>
			<caution>ADD MORE CONTENT FOR APACHE </caution>
		</section>
	</chapter>
