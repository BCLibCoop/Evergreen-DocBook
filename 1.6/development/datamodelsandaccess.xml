<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="data_models_and_access" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="EN"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
	<chapterinfo>
	<title>Evergreen Data Models and Access</title>
	</chapterinfo>
	<section id="_database_schema">
		<title>Database schema</title>
		<simpara>The database schema is tied pretty tightly to PostgreSQL. Although PostgreSQL
		adheres closely to ANSI SQL standards, the use of schemas, SQL functions
		implemented in both plpgsql and plperl, and PostgreSQL&#8217;s native full-text
		search would make it&#8230; challenging&#8230; to port to other database platforms.</simpara>
		<simpara>A few common PostgreSQL interfaces for poking around the schema and
		manipulating data are:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		psql (the command line client)
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		pgadminIII (a GUI client).
		</simpara>
		</listitem>
		</itemizedlist>
		<simpara>Or you can read through the source files in Open-ILS/src/sql/Pg.</simpara>
		<simpara>Let&#8217;s take a quick tour through the schemas, pointing out some highlights
		and some key interdependencies:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		actor.org_unit &#8594; asset.copy_location
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		actor.usr &#8594; actor.card
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		biblio.record_entry &#8594; asset.call_number &#8594; asset.copy
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		config.metabib_field &#8594; metabib.*_field_entry
		</simpara>
		</listitem>
		</itemizedlist>
	</section>
	<section id="_database_access_methods">
		<title>Database access methods</title>
		<simpara>You could use direct access to the database via Perl DBI, JDBC, etc,
		but Evergreen offers several database CRUD services for
		creating / retrieving / updating / deleting data. These avoid tying
		you too tightly to the current database schema and they funnel database
		access through the same mechanism, rather than tying up connections
		with other interfaces.</simpara>
	</section>
	<section id="_evergreen_interface_definition_language_idl">
		<title>Evergreen Interface Definition Language (IDL)</title>
		<simpara>Defines properties and required permissions for Evergreen classes.
		To reduce network overhead, a given object is identified via a
		class-hint and serialized as a JSON array of properties (no named properties).</simpara>
		<simpara>As of 1.6, fields will be serialized in the order in which they appear
		in the IDL definition file, and the is_new / is_changed / is_deleted
		properties are automatically added. This has greatly reduced the size of
		the <literal>fm_IDL.xml</literal> file and makes DRY people happier :)</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		&#8230; oils_persist:readonly tells us, if true, that the data lives in the database, but is pulled from the SELECT statement defined in the &lt;oils_persist:source_definition&gt; child element
		</simpara>
		</listitem>
		</itemizedlist>
		<simplesect id="_idl_basic_example_config_language_map">
			<title>IDL basic example (config.language_map)</title>
			<programlisting language="xml" linenumbering="unnumbered">&lt;class id="clm" controller="open-ils.cstore open-ils.pcrud"
				oils_obj:fieldmapper="config::language_map"
				oils_persist:tablename="config.language_map"
				reporter:label="Language Map" oils_persist:field_safe="true"&gt; <co id="dmCO5-1"/> <co id="dmCO5-2"/> <co id="dmCO5-3"/> <co id="dmCO5-4"/>
			    &lt;fields oils_persist:primary="code" oils_persist:sequence=""&gt;  <co id="dmCO5-5"/>
				&lt;field reporter:label="Language Code" name="code"
				    reporter:selector="value" reporter:datatype="text"/&gt; <co id="dmCO5-6"/>
				&lt;field reporter:label="Language" name="value"
				    reporter:datatype="text" oils_persist:i18n="true"/&gt; <co id="dmCO5-7"/>
			    &lt;/fields&gt;
			    &lt;links/&gt;
			    &lt;permacrud xmlns="http://open-ils.org/spec/opensrf/IDL/permacrud/v1"&gt; <co id="dmCO5-8"/>
				&lt;actions&gt;
				    &lt;create global_required="true" permission="CREATE_MARC_CODE"&gt; <co id="dmCO5-9"/>
				    &lt;retrieve global_required="true"
					permission="CREATE_MARC_CODE UPDATE_MARC_CODE DELETE_MARC_CODE"&gt;
				    &lt;update global_required="true" permission="UPDATE_MARC_CODE"&gt;
				    &lt;delete global_required="true" permission="DELETE_MARC_CODE"&gt;
				&lt;/actions&gt;
			    &lt;/permacrud&gt;
			&lt;/class&gt;</programlisting>
			<calloutlist>
			<callout arearefs="dmCO5-1">
			<simpara>
			The <literal>class</literal> element defines the attributes and permissions for classes,
			and relationships between classes.
			</simpara>
			<itemizedlist>
			<listitem>
			<simpara>
			The <literal>id</literal> attribute on the <literal>class</literal> element defines the class hint that is
			used everywhere in Evergreen.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>controller</literal> attribute defines the OpenSRF
			services that provide access to the data for the class objects.
			</simpara>
			</listitem>
			</itemizedlist>
			</callout>
			<callout arearefs="dmCO5-2">
			<simpara>
			The <literal>oils_obj::fieldmapper</literal> attribute defines the name of the class that
			is generated by <literal>OpenILS::Utils::Fieldmapper</literal>.
			</simpara>
			</callout>
			<callout arearefs="dmCO5-3">
			<simpara>
			The <literal>oils_persist:tablename</literal> attribute defines the name of the table
			that contains the data for the class objects.
			</simpara>
			</callout>
			<callout arearefs="dmCO5-4">
			<simpara>
			The reporter interface uses <literal>reporter:label</literal> attribute values in
			the source list to provide meaningful class and attribute names. The
			<literal>open-ils.fielder</literal> service generates a set of methods that provide direct
			access to the classes for which <literal>oils_persist:field_safe</literal> is <literal>true</literal>. For
			example,
			</simpara>
			<screen>srfsh# request open-ils.fielder open-ils.fielder.clm.atomic \
			    {"query":{"code":{"=":"eng"}}}

			Received Data: [
			  {
			    "value":"English",
			    "code":"eng"
			  }
			]</screen>
			</callout>
			<callout arearefs="dmCO5-5">
			<simpara>
			The <literal>fields</literal> element defines the list of fields for the class.
			</simpara>
			<itemizedlist>
			<listitem>
			<simpara>
			The <literal>oils_persist:primary</literal> attribute defines the column that acts as
			the primary key for the table.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>oils_persist:sequence</literal> attribute holds the name of the database
			sequence.
			</simpara>
			</listitem>
			</itemizedlist>
			</callout>
			<callout arearefs="dmCO5-6">
			<simpara>
			Each <literal>field</literal> element defines one property of the class.
			</simpara>
			<itemizedlist>
			<listitem>
			<simpara>
			The <literal>name</literal> attribute defines the getter/setter method name for the field.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>reporter:label</literal> attribute defines the attribute name as used in
			the reporter interface.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>reporter:selector</literal> attribute defines the field used in the reporter
			filter interface to provide a selectable list. This gives the user a more
			meaningful access point than the raw numeric ID or abstract code.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>reporter:datatype</literal> attribute defines the type of data held by
			this property for the purposes of the reporter.
			</simpara>
			</listitem>
			</itemizedlist>
			</callout>
			<callout arearefs="dmCO5-7">
			<simpara>
			The <literal>oils_persist:i18n</literal> attribute, when <literal>true</literal>, means that
			translated values for the field&#8217;s contents may be accessible in
			different locales.
			</simpara>
			</callout>
			<callout arearefs="dmCO5-8">
			<simpara>
			The <literal>permacrud</literal> element defines the permissions (if any) required
			to <emphasis role="strong">c</emphasis>reate, <emphasis role="strong">r</emphasis>etrieve, <emphasis role="strong">u</emphasis>pdate, and <emphasis role="strong">d</emphasis>elete data for this
			class. <literal>open-ils.permacrud</literal> must be defined as a controller for the class
			for the permissions to be applied.
			</simpara>
			</callout>
			<callout arearefs="dmCO5-9">
			<simpara>
			Each action requires one or more <literal>permission</literal> values that the
			user must possess to perform the action.
			</simpara>
			<itemizedlist>
			<listitem>
			<simpara>
			If the <literal>global_required</literal> attribute is <literal>true</literal>, then the user must
			have been granted that permission globally (depth = 0) to perform
			the action.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			The <literal>context_field</literal> attribute denotes the <literal>&lt;field&gt;</literal> that identifies
			the org_unit at which the user must have the pertinent permission.
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			An action element may contain a <literal>&lt;context_field&gt;</literal> element that
			defines the linked class (identified by the <literal>link</literal> attribute) and
			the field in the linked class that identifies the org_unit where
			the permission must be held.
			</simpara>
			<itemizedlist>
			<listitem>
			<simpara>
			If the <literal>&lt;context_field&gt;</literal> element contains a <literal>jump</literal> attribute,
			then it defines a link to a link to a class with a field identifying
			the org_unit where the permission must be held.
			</simpara>
			</listitem>
			</itemizedlist>
			</listitem>
			</itemizedlist>
			</callout>
			</calloutlist>
		</simplesect>
		<simplesect id="_reporter_data_types_and_their_possible_values">
			<title>Reporter data types and their possible values</title>
			<itemizedlist>
			<listitem>
			<simpara>
			<literal>bool</literal>: Boolean <literal>true</literal> or <literal>false</literal>
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>id</literal>: ID of the row in the database
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>int</literal>: integer value
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>interval</literal>: PostgreSQL time interval
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>link</literal>: link to another class, as defined in the <literal>&lt;links&gt;</literal>
			element of the class definition
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>money</literal>: currency amount
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>org_unit</literal>: list of org_units
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>text</literal>: text value
			</simpara>
			</listitem>
			<listitem>
			<simpara>
			<literal>timestamp</literal>: PostgreSQL timestamp
			</simpara>
			</listitem>
			</itemizedlist>
		</simplesect>
		<simplesect id="_idl_example_with_linked_fields_actor_workstation">
			<title>IDL example with linked fields (actor.workstation)</title>
			<simpara>Just as tables often include columns with foreign keys that point
			to values stored in the column of a different table, IDL classes
			can contain fields that link to fields in other classes. The <literal>&lt;links&gt;</literal>
			element defines which fields link to fields in other classes, and
			the nature of the relationship:</simpara>
			<programlisting language="xml" linenumbering="unnumbered">&lt;class id="aws" controller="open-ils.cstore"
				oils_obj:fieldmapper="actor::workstation"
				oils_persist:tablename="actor.workstation"
				reporter:label="Workstation"&gt;
			    &lt;fields oils_persist:primary="id"
				    oils_persist:sequence="actor.workstation_id_seq"&gt;
				&lt;field reporter:label="Workstation ID" name="id"
					reporter:datatype="id"/&gt;
				&lt;field reporter:label="Workstation Name" name="name"
					reporter:datatype="text"/&gt;
				&lt;field reporter:label="Owning Library" name="owning_lib"
					reporter:datatype="org_unit"/&gt;
				&lt;field reporter:label="Circulations" name="circulations"
					oils_persist:virtual="true" reporter:datatype="link"/&gt; <co id="dmCO6-1"/>
			    &lt;/fields&gt;
			    &lt;links&gt;  <co id="dmCO6-2"/>
				&lt;link field="owning_lib" reltype="has_a" key="id"
					map="" class="aou"/&gt;  <co id="dmCO6-3"/>
				&lt;link field="circulations" reltype="has_many" key="workstation"
					map="" class="circ"/&gt;
				&lt;link field="circulation_checkins" reltype="has_many"
					key="checkin_workstation" map="" class="circ"/&gt;
			    &lt;/links&gt;
			&lt;/class&gt;</programlisting>
			<calloutlist>
			<callout arearefs="dmCO6-1">
			<simpara>
			This field includes an <literal>oils_persist:virtual</literal> attribute with the value of
			<literal>true</literal>, meaning that the linked class <literal>circ</literal> is a virtual class.
			</simpara>
			</callout>
			<callout arearefs="dmCO6-2">
			<simpara>
			The <literal>&lt;links&gt;</literal> element contains 0 or more <literal>&lt;link&gt;</literal> elements.
			</simpara>
			</callout>
			<callout arearefs="dmCO6-3">
			<simpara>
			Each <literal>&lt;link&gt;</literal> element defines the field (<literal>field</literal>) that links to a different
			class (<literal>class</literal>), the relationship (<literal>rel_type</literal>) between this field and the target
			field (<literal>key</literal>). If the field in this class links to a virtual class, the (<literal>map</literal>)
			attribute defines the field in the target class that returns a list of matching
			objects for each object in this class.
			</simpara>
			</callout>
			</calloutlist>
		</simplesect>
	</section>
	<section id="open_ils_cstore_literal_data_access_interfaces">
		<title><literal>open-ils.cstore</literal> data access interfaces</title>
		<simpara>For each class documented in the IDL, the <literal>open-ils.cstore</literal> service
		automatically generates a set of data access methods, based on the
		<literal>oils_persist:tablename</literal> class attribute.</simpara>
		<simpara>For example, for the class hint <literal>clm</literal>, cstore generates the following
		methods with the <literal>config.language_map</literal> qualifer:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.id_list {"code" { "like": "e%" } }</literal>
		</simpara>
		<simpara>Retrieves a list composed only of the IDs that match the query.</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.retrieve "eng"</literal>
		</simpara>
		<simpara>Retrieves the object that matches a specific ID.</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.search {"code" : "eng"}</literal>
		</simpara>
		<simpara>Retrieves a list of objects that match the query.</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.create &lt;_object_&gt;</literal>
		</simpara>
		<simpara>Creates a new object from the passed in object.</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.update &lt;_object_&gt;</literal>
		</simpara>
		<simpara>Updates the object that has been passed in.</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.direct.config.language_map.delete "eng"</literal>
		</simpara>
		<simpara>Deletes the object that matches the query.</simpara>
		</listitem>
		</itemizedlist>
	</section>
	<section id="_open_ils_pcrud_data_access_interfaces">
		<title>open-ils.pcrud data access interfaces</title>
		<simpara>For each class documented in the IDL, the <literal>open-ils.pcrud</literal> service
		automatically generates a set of data access methods, based on the
		<literal>oils_persist:tablename</literal> class attribute.</simpara>
		<simpara>For example, for the class hint <literal>clm</literal>, <literal>open-ils.pcrud</literal> generates the following
		methods that parallel the <literal>open-ils.cstore</literal> interface:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.id_list.clm &lt;_authtoken_&gt;, { "code": { "like": "e%" } }</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.retrieve.clm &lt;_authtoken_&gt;, "eng"</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.search.clm &lt;_authtoken_&gt;, { "code": "eng" }</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.create.clm &lt;_authtoken_&gt;, &lt;_object_&gt;</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.update.clm &lt;_authtoken_&gt;, &lt;_object_&gt;</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.delete.clm &lt;_authtoken_&gt;, "eng"</literal>
		</simpara>
		</listitem>
		</itemizedlist>
	</section>
	<section id="_transaction_and_savepoint_control">
		<title>Transaction and savepoint control</title>
		<simpara>Both <literal>open-ils.cstore</literal> and <literal>open-ils.pcrud</literal> enable you to control database transactions
		to ensure that a set of operations either all succeed, or all fail,
		atomically:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.transaction.begin</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.transaction.commit</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.transaction.rollback</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.transaction.begin</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.transaction.commit</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.transaction.rollback</literal>
		</simpara>
		</listitem>
		</itemizedlist>
		<simpara>At a more granular level, <literal>open-ils.cstore</literal> and <literal>open-ils.pcrud</literal> enable you to set database
		savepoints to ensure that a set of operations either all succeed, or all
		fail, atomically, within a given transaction:</simpara>
		<itemizedlist>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.savepoint.begin</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.savepoint.commit</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.cstore.savepoint.rollback</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.savepoint.begin</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.savepoint.commit</literal>
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		<literal>open-ils.pcrud.savepoint.rollback</literal>
		</simpara>
		</listitem>
		</itemizedlist>
		<simpara>Transactions and savepoints must be performed within a stateful
		connection to the <literal>open-ils.cstore</literal> and <literal>open-ils.pcrud</literal> services.
		In <literal>srfsh</literal>, you can open a stateful connection using the <literal>open</literal>
		command, and then close the stateful connection using the <literal>close</literal>
		command - for example:</simpara>
		<screen>srfsh# open open-ils.cstore
		... perform various transaction-related work
		srfsh# close open-ils.cstore</screen>
		<simplesect id="_json_queries">
			<title>JSON Queries</title>
			<simpara>Beyond simply retrieving objects by their ID using the <literal>\*.retrieve</literal>
			methods, you can issue queries against the <literal>\*.delete</literal> and <literal>\*.search</literal>
			methods using JSON to filter results with simple or complex search
			conditions.</simpara>
			<simpara>For example, to generate a list of barcodes that are held in a
			copy location that allows holds and is visible in the OPAC:</simpara>
			<programlisting language="sh" linenumbering="unnumbered">srfsh# request open-ils.cstore open-ils.cstore.json_query  <co id="dmCO7-1"/>
			    {"select": {"acp":["barcode"], "acpl":["name"]}, <co id="dmCO7-2"/>
			     "from":   {"acp":"acpl"},   <co id="dmCO7-3"/>
			     "where":  [     <co id="dmCO7-4"/>
				 {"+acpl": "holdable"},   <co id="dmCO7-5"/>
				 {"+acpl": "opac_visible"}     <co id="dmCO7-6"/>
			     ]}

			Received Data: {
			  "barcode":"BARCODE1",
			  "name":"Stacks"
			}

			Received Data: {
			  "barcode":"BARCODE2",
			  "name":"Stacks"
			}</programlisting>
			<calloutlist>
			<callout arearefs="dmCO7-1">
			<simpara>
			Invoke the <literal>json_query</literal> service.
			</simpara>
			</callout>
			<callout arearefs="dmCO7-2">
			<simpara>
			Select the <literal>barcode</literal> field from the <literal>acp</literal> class and the <literal>name</literal>
			field from the <literal>acpl</literal> class.
			</simpara>
			</callout>
			<callout arearefs="dmCO7-3">
			<simpara>
			Join the <literal>acp</literal> class to the <literal>acpl</literal> class based on the linked field
			defined in the IDL.
			</simpara>
			</callout>
			<callout arearefs="dmCO7-4">
			<simpara>
			Add a <literal>where</literal> clause to filter the results. We have more than one
			condition beginning with the same key, so we wrap the conditions inside
			an array.
			</simpara>
			</callout>
			<callout arearefs="dmCO7-5">
			<simpara>
			The first condition tests whether the boolean value of the <literal>holdable</literal>
			field on the <literal>acpl</literal> class is true.
			</simpara>
			</callout>
			<callout arearefs="dmCO7-6">
			<simpara>
			The second condition tests whether the boolean value of the
			<literal>opac_visible</literal> field on the <literal>acpl</literal> class is true.
			</simpara>
			</callout>
			</calloutlist>
			<simpara>For thorough coverage of the breadth of support offered by JSON
			query syntax, see <ulink url="http://open-ils.org/dokuwiki/doku.php?id=documentation:technical:jsontutorial">JSON Queries: A Tutorial</ulink>.</simpara>
		</simplesect>
		<simplesect id="_fleshing_linked_objects">
			<title>Fleshing linked objects</title>
			<simpara>A simplistic approach to retrieving a set of objects that are linked to
			an object that you are retrieving - for example, a set of call numbers
			linked to the barcodes that a given user has borrowed - would be to:
			  1. Retrieve the list of circulation objects (<literal>circ</literal> class)
			for a given user (<literal>usr</literal> class).
			  2. For each circulation object, look up the target copy (<literal>target_copy</literal>
			field, linked to the <literal>acp</literal> class).
			  3. For each copy, look up the call number for that copy (<literal>call_number</literal>
			field, linked to the <literal>acn</literal> class).</simpara>
			<simpara>However, this would result in potentially hundreds of round-trip
			queries from the client to the server. Even with low-latency connections,
			the network overhead would be considerable. So, built into the <literal>open-ils.cstore</literal> and
			<literal>open-ils.pcrud</literal> access methods is the ability to <emphasis>flesh</emphasis> linked fields -
			that is, rather than return an identifier to a given linked field,
			the method can return the entire object as part of the initial response.</simpara>
			<simpara>Most of the interfaces that return class instances from the IDL offer the
			ability to flesh returned fields. For example, the
			<literal>open-ils.cstore.direct.\*.retrieve</literal> methods allow you to specify a
			JSON structure defining the fields you wish to flesh in the returned object.</simpara>
			<formalpara><title>Fleshing fields in objects returned by <literal>open-ils.cstore</literal></title><para>
			<programlisting language="sh" linenumbering="unnumbered">srfsh# request open-ils.cstore open-ils.cstore.direct.asset.copy.retrieve 1, \
			    {
				"flesh": 1,    <co id="dmCO8-1"/>
				"flesh_fields": {   <co id="dmCO8-2"/>
				    "acp": ["location"]
				}
			    }</programlisting>
			</para></formalpara>
			<calloutlist>
			<callout arearefs="dmCO8-1">
			<simpara>
			The <literal>flesh</literal> argument is the depth at which objects should be fleshed.
			For example, to flesh out a field that links to another object that includes
			a field that links to another object, you would specify a depth of 2.
			</simpara>
			</callout>
			<callout arearefs="dmCO8-2">
			<simpara>
			The <literal>flesh_fields</literal> argument contains a list of objects with the fields
			to flesh for each object.
			</simpara>
			</callout>
			</calloutlist>
			<simpara>Let&#8217;s flesh things a little deeper. In addition to the copy location,
			let&#8217;s also flesh the call number attached to the copy, and then flesh
			the bibliographic record attached to the call number.</simpara>
			<formalpara><title>Fleshing fields in fields of objects returned by <literal>open-ils.cstore</literal></title><para>
			<programlisting language="java" linenumbering="unnumbered">request open-ils.cstore open-ils.cstore.direct.asset.copy.retrieve 1, \
			    {
				"flesh": 2,
				"flesh_fields": {
				    "acp": ["location", "call_number"],
				    "acn": ["record"]
				 }
			    }</programlisting>
			</para></formalpara>
		</simplesect>
	</section>
	<section id="_adding_an_idl_entry_for_resolverresolver">
		<title>Adding an IDL entry for ResolverResolver</title>
		<simpara>Most OpenSRF methods in Evergreen define their object interface in the
		IDL. Without an entry in the IDL, the prospective caller of a given
		method is forced to either call the method and inspect the returned
		contents, or read the source to work out the structure of the JSON
		payload. At this stage of the tutorial, we have not defined an entry
		in the IDL to represent the object returned by the
		<literal>open-ils.resolver.resolve_holdings</literal> method. It is time to complete
		that task.</simpara>
		<simpara>The <literal>open-ils.resolver</literal> service is unlike many of the other classes
		defined in the IDL because its data is not stored in the Evergreen
		database. Instead, the data is requested from an external Web service
		and only temporarily cached in <literal>memcached</literal>. Fortunately, the IDL
		enables us to represent this kind of class by setting the
		<literal>oils_persist:virtual</literal> class attribute to <literal>true</literal>.</simpara>
		<simpara>So, let&#8217;s add an entry to the IDL for the <literal>open-ils.resolver.resolve_holdings</literal>
		service:</simpara>
		<programlisting language="xml" linenumbering="unnumbered"></programlisting>
		<simpara>And let&#8217;s make <literal>ResolverResolver.pm</literal> return an array composed of our new
		<literal>rhr</literal> classes rather than raw JSON objects:</simpara>
		<programlisting language="perl" linenumbering="unnumbered"></programlisting>
		<simpara>Once we add the new entry to the IDL and copy the revised <literal>ResolverResolver.pm</literal>
		Perl module to <literal>/openils/lib/perl5/OpenILS/Application/</literal>, we need to:</simpara>
		<orderedlist numeration="arabic">
		<listitem>
		<simpara>
		Copy the updated IDL to both the <literal>/openils/conf/</literal> and
		<literal>/openils/var/web/reports/</literal> directories. The Dojo approach to
		parsing the IDL uses the IDL stored in the reports directory.
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		Restart the Perl services to make the new IDL visible to the services
		and refresh the <literal>open-ils.resolver</literal> implementation
		</simpara>
		</listitem>
		<listitem>
		<simpara>
		Rerun <literal>/openils/bin/autogen.sh</literal> to regenerate the JavaScript versions
		of the IDL required by the HTTP translator and gateway.
		</simpara>
		</listitem>
		</orderedlist>
		<simpara>We also need to adjust our JavaScript client to use the nifty new
		objects that <literal>open-ils.resolver.resolve_holdings</literal> now returns.
		The best approach is to use the support in Evergreen&#8217;s Dojo extensions
		to generate the JavaScript classes directly from the IDL XML file.</simpara>
		<formalpara><title>Accessing classes defined in the IDL via Fieldmapper</title><para>
		<programlisting language="html" linenumbering="unnumbered"></programlisting>
		</para></formalpara>
		<calloutlist>
		<callout arearefs="">
		<simpara>
		Load the Dojo core.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		<literal>fieldmapper.AutoIDL</literal> reads <literal>/openils/var/reports/fm_IDL.xml</literal> to
		generate a list of class properties.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		<literal>fieldmapper.dojoData</literal> seems to provide a store for Evergreen data
		accessed via Dojo.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		<literal>fieldmapper.Fieldmapper</literal> converts the list of class properties into
		actual classes.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		<literal>fieldmapper.standardRequest</literal> invokes an OpenSRF method and returns
		an array of objects.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		The first argument to <literal>fieldmapper.standardRequest</literal> is an array
		containing the OpenSRF service name and method name.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		The second argument to <literal>fieldmapper.standardRequest</literal> is an array
		containing the arguments to pass to the OpenSRF method.
		</simpara>
		</callout>
		<callout arearefs="">
		<simpara>
		As Fieldmapper has instantiated the returned objects based on their
		class hints, we can invoke getter/setter methods on the objects.
		</simpara>
		</callout>
		</calloutlist>
	</section>
	<section id="dm_attribution">
		<simpara>This chapter was taken from Dan Scott's <emphasis>Developer Workshop</emphasis>, February 2010.</simpara>
	</section>
</chapter>
